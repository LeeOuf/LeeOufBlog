{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.DS_Store","hash":"fd500478ae3238e7a0c1ac5c3d079537c3e488cf","modified":1471423343000},{"_id":"source/CNAME","hash":"54735b4b06c1a145cd4ba0ecb1ce8147d94f85cc","modified":1471254097000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1470891571000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1470891571000},{"_id":"source/.DS_Store","hash":"f01a7a888ac58b6d38db0d76e6605f4f5c30b23b","modified":1471254280000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1470891571000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1470891571000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1470891571000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1470891571000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1470891571000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1470891571000},{"_id":"themes/next/_config.yml","hash":"46bc2f6d8c33bd48f5b27dac5c8219230319e6a7","modified":1471252326000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1470891571000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1470891571000},{"_id":"source/_posts/Objective-C：类的属性和方法.md","hash":"739dbc7e3330b11481f87a09d731fc3bfee17f0f","modified":1472620524000},{"_id":"source/_posts/iOS基础：类、对象和方法.md","hash":"1b2baa6ad6bea79c1838e6db9e2c4963e94d5700","modified":1471338322000},{"_id":"source/_posts/iOS学习计划.md","hash":"c7db4619eb6e900486a1528258a0d4ed6136d659","modified":1471338968000},{"_id":"source/_posts/.DS_Store","hash":"58a25dae69affbf7cc9e1d743eda36e7fedd93b0","modified":1471254280000},{"_id":"source/_posts/理解GCD原理.md","hash":"7af3ccf06ce0cfaa1a128854480615387c98549c","modified":1471258970000},{"_id":"source/_posts/开始.md","hash":"30d8b9f3485478afe385c3d1fa4c2a8e4bee0890","modified":1471254097000},{"_id":"source/categories/index.md","hash":"acfa5cd4303e752e19079750e81b72ebc81a0013","modified":1471254097000},{"_id":"source/tags/index.md","hash":"17c523c2eac460241f5623b04b7a1ceb02e62c08","modified":1471254097000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1470891571000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1470891571000},{"_id":"themes/next/languages/en.yml","hash":"6fb5375936d6943bbda0a5272297d1b725ba9471","modified":1470988048000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1470891571000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1470891571000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1470891571000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1470891571000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1470891571000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"997d59cf360a44f88681a438b2dac20fddb2f2a0","modified":1471061648000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1470891571000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1470891571000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1470891571000},{"_id":"themes/next/layout/_layout.swig","hash":"dd5ffebbf9bf09d3f0326110f4b796d4743a2e89","modified":1471072871000},{"_id":"themes/next/layout/.DS_Store","hash":"5d7b333781d351c1e493504cdfb2b3c9569ad577","modified":1470896944000},{"_id":"themes/next/layout/archive.swig","hash":"c9383f8b1dd07a1018ce11a9884b9c51e0731525","modified":1470991078000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1470891571000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1470891571000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1470891571000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1470891571000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1470891571000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1470891571000},{"_id":"themes/next/scripts/.DS_Store","hash":"de653034730e766ecdf333bb705d0bec0dbb123e","modified":1470896944000},{"_id":"themes/next/source/.DS_Store","hash":"5c48bbf55f974d06bfa5cc20c535523a883390ee","modified":1471423349000},{"_id":"themes/next/test/.DS_Store","hash":"86aaef889514f63213877b6166c2177fd70fc322","modified":1470896939000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1470891571000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1470891571000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1470891571000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470891571000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1470891571000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1470891571000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1470891571000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1470891571000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1470891571000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1470891571000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1470891571000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1470891571000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1470891571000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1470891571000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1470891571000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1470891571000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1470891571000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1471252260000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1470891571000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1470891571000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1470891571000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1470891571000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1470891571000},{"_id":"themes/next/source/images/.DS_Store","hash":"36a4aa2b07ffd7b6ea315af64e66c7df32e21fb5","modified":1471425100000},{"_id":"themes/next/source/images/avatar.gif","hash":"c789a0e2e9c844c3ce8adf503e250afb110ebd54","modified":1471423109000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1470891571000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1470891571000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1470891571000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1470891571000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1470891571000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1470891571000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1470891571000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1470891571000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470891571000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470891571000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1470891571000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1470891571000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1470891571000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470891571000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470891571000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470891571000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470891571000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470891571000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470891571000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470891571000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1470891571000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1470891571000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1470891571000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1470891571000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1470891571000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1470891571000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1470891571000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1470891571000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1470891571000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1470891571000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"656c60c7d93f110a9e941a5fca617ee277fed707","modified":1471251826000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1470891571000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1470891571000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1470891571000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1470891571000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1470891571000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1470891571000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1470891571000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1470891571000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1470891571000},{"_id":"themes/next/source/js/src/post-details.js","hash":"cd067c34beb799df5ee8736352786f8fffe15ae5","modified":1471079695000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1470891571000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1470891571000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1470891571000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1470891571000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1470891571000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1470891571000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1470891571000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1470891571000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1470891571000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1470891571000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1470891571000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1470891571000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1470891571000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1470891571000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1470891571000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1470891571000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1470891571000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1470891571000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1470891571000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1470891571000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1470891571000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1470891571000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1470891571000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1470891571000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1470891571000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470891571000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1470891571000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1470891571000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1470891571000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1470891571000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1470891571000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1470891571000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1470891571000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470891571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1470891571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1470891571000},{"_id":"public/categories/index.html","hash":"69747587b366c45eab4aba8e285137e0325da66b","modified":1472620542505},{"_id":"public/tags/index.html","hash":"3c207defd783f444c859c64f41e441af43b2a914","modified":1472620542505},{"_id":"public/2016/08/10/开始/index.html","hash":"1b229c80393dc8ea206419cf60ab5f693db1f8fc","modified":1472620542505},{"_id":"public/archives/index.html","hash":"53240442091db436c6a1c993aa68efe988ff45e7","modified":1472620542505},{"_id":"public/archives/2016/index.html","hash":"fe05d0d74aefa81312d478d63d49b8f31fdd5b2e","modified":1472620542505},{"_id":"public/archives/2016/08/index.html","hash":"614a84d288f227dc09316705476f25f2d35ebee7","modified":1472620542505},{"_id":"public/categories/ios/index.html","hash":"0050d95743bf00c20c0d4828e3ad86797fa590ed","modified":1472620542505},{"_id":"public/categories/essay/index.html","hash":"e0cc7f6553c47b725076e0060d585c0721b4bea8","modified":1472620542505},{"_id":"public/tags/Objective-C/index.html","hash":"988e33d60f13e969be125fdab81b35637a75339b","modified":1472620542506},{"_id":"public/tags/程序设计基础/index.html","hash":"d46fecf114895f910fdcc8e0a05258e3078420e8","modified":1472620542506},{"_id":"public/tags/类/index.html","hash":"4364402a268ddbe4b6a36c64c23fc4ce9dd081b5","modified":1472620542506},{"_id":"public/tags/对象/index.html","hash":"04798d361a4c7cbd5dcc5dee9b7ad258378a1c52","modified":1472620542506},{"_id":"public/tags/方法/index.html","hash":"c63baa807dc82acddd8248fe1658b17b200a9238","modified":1472620542506},{"_id":"public/tags/autoreleasepool/index.html","hash":"c960646b7282d2f6aef3c8f84be975f7ff932104","modified":1472620542506},{"_id":"public/tags/惰性实例化/index.html","hash":"fd07c32acb9dc32826b2e82bdaf428005e0c908c","modified":1472620542506},{"_id":"public/tags/属性/index.html","hash":"079eca8064c505e6d5dbe8a44e1821155eec150f","modified":1472620542506},{"_id":"public/tags/iOS/index.html","hash":"4d1a4e90e2126a8fa2202b8b63961cef73c4bcfd","modified":1472620542506},{"_id":"public/tags/多线程/index.html","hash":"48c604c4911ee9a2761c01db2be7e7ffa1c50278","modified":1472620542506},{"_id":"public/tags/GCD/index.html","hash":"2df3c65c4e5971e74bc97fc4a9b109a70a6b56be","modified":1472620542506},{"_id":"public/2016/08/16/Objective-C：类的属性和方法/index.html","hash":"fa04f71cfea53ba46f96b7f4deb2c6407f4ef390","modified":1472620542506},{"_id":"public/2016/08/14/iOS基础：类、对象和方法/index.html","hash":"046cd50835758796f069871566de8c7e38e029e6","modified":1472620542506},{"_id":"public/2016/08/11/理解GCD原理/index.html","hash":"8750da5a050e1ce916d5d5da8fb3cd332115ea71","modified":1472620542506},{"_id":"public/2016/08/10/iOS学习计划/index.html","hash":"e770e3351e1b9e6358a9c0202d2b3f4da84f30c2","modified":1472620542506},{"_id":"public/index.html","hash":"c48fd7e3497a4b0d4257df10af61d898a76de6ca","modified":1472620542507},{"_id":"public/CNAME","hash":"54735b4b06c1a145cd4ba0ecb1ce8147d94f85cc","modified":1472620542515},{"_id":"public/images/avatar.gif","hash":"c789a0e2e9c844c3ce8adf503e250afb110ebd54","modified":1472620542515},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1472620542515},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1472620542515},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1472620542516},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1472620542516},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1472620542516},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1472620542517},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1472620542517},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472620542517},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1472620542517},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472620542517},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1472620542517},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1472620542517},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1472620542517},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1472620542517},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472620542517},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472620542517},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472620542517},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472620542517},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472620542517},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472620542517},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1472620542517},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1472620542517},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472620542517},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1472620543325},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1472620543334},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1472620543335},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1472620543341},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1472620543341},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1472620543341},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1472620543342},{"_id":"public/js/src/post-details.js","hash":"cd067c34beb799df5ee8736352786f8fffe15ae5","modified":1472620543342},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1472620543342},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1472620543342},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1472620543342},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1472620543342},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1472620543342},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1472620543342},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1472620543342},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1472620543342},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1472620543342},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1472620543342},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1472620543342},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1472620543342},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1472620543342},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1472620543342},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1472620543342},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1472620543342},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1472620543342},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1472620543342},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472620543342},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1472620543342},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472620543342},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1472620543342},{"_id":"public/css/main.css","hash":"677e0c022e1a5af9badccf85c31918cd2d510474","modified":1472620543342},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1472620543342},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1472620543342},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472620543342},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1472620543342},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1472620543342},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1472620543342},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1472620543343},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1472620543343},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1472620543343},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1472620543343},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1472620543359}],"Category":[{"name":"iOS","_id":"cisig8xnp0003zpk5f5m5k4xu"},{"name":"随笔","_id":"cisig8xo3000ezpk5tnfu7vi8"}],"Data":[],"Page":[{"title":"categories","date":"2016-08-13T04:06:11.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-13 12:06:11\ntype: \"categories\"\n---\n","updated":"2016-08-15T09:41:37.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cisig8xrx0016zpk5l7qx9hf0","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-08-13T04:06:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-13 12:06:24\ntype: \"tags\"\n---\n","updated":"2016-08-15T09:41:37.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cisig8xs10017zpk5rido5l4w","content":"","excerpt":"","more":""}],"Post":[{"title":"iOS基础: 类、对象和方法","date":"2016-08-14T08:15:39.000Z","_content":"\n本文是在阅读`Objective-C程序设计  第6版`一书过程中写的学习笔记，文中出现的大部分代码基本与书中相同。\n<!-- more -->\n\n# 什么是对象\n我们知道，OC是在C的基础上设计的`面向对象`的程序设计语言，而C则是`过程性语言`。\n以我的理解，所谓的过程性语言，是为了实现某种功能所设计的，比如我想要将两个整数累加，返回它们的和，这是我的目的，所以C语言中完成这种目的一段代码称为函数，这个函数的功能是累加两个整数。\n而所谓的面相对象，这个函数则被看作一个真实存在的物件，这里我们叫它计算器，当我们想要累加两个整数时，创建了一个计算器对象，然后再调用它本身的功能（方法）来实现我们的目的。\n\n我认为可以这样理解，过程性语言中，“我”是主体，当“我”想要做什么时，创建了“我”需要的函数然后去使用它；而面向对象，每个对象都是独立存在的主体，它们可以为“我”服务。\n\n# 类、方法\n**Fraction类**\n```\n#import <Foundation/Foundation.h>\n\n@interface Fraction : NSObject\n\n- (void)print;\n- (void)setNumerator: (int)n;\n- (void)setDenominator: (int)d;\n\n@end\n```\n\n```\n#import \"Fraction.h\"\n\n@implementation Fraction {\n    int numerator;\n    int denominator;\n}\n\n- (void)print {\n    NSLog(@\"%i / %i\", numerator, denominator);\n}\n\n- (void)setNumerator:(int)n {\n    numerator = n;\n}\n\n- (void)setDenominator:(int)d {\n    denominator = d;\n}\n@end\n```\n\n**main函数**\n```\n#import <Foundation/Foundation.h>\n#import \"Fraction.h\"\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // insert code here...\n        Fraction *fraction;\n        \n        fraction = [[Fraction alloc] init];\n        [fraction setNumerator:1];\n        [fraction setDenominator:3];\n        \n        NSLog(@\"The value of fracton is: \");\n        [fraction print];\n    }\n    return 0;\n}\n```\n\n先看Fraction类，这里我们只关注它的头文件，这个对象告诉我们，它的功能是通过分子和分母获得一个分数，它有3个对外部可见的方法，打印分数、获得分子、获得分母。这里我们可以完全不必理会它的实现，只需要获知并且相信它很好地实现了这三个功能。\n另外@符号在\"\"前，表示这是常量NSString对象。\n\n然后来看main函数。\n第一行中，我们就看到了`@autoreleasepool`，这是什么呢？\n## autoreleasepool\n嵌套在其后的代码块会被放在“自动释放池”这一语境中执行。\n什么是“自动释放池”？首先我们需要知道什么是Runloop，Runloop是一个while循环，当然这是一个很复杂的循环。可以理解为一个App中有许多个Runloop，它们在监听着用户操作、管理着内存以及执行一些操作。以后我们再来关心Runloop的具体实现。\n\n[对于每一个Runloop， 系统会隐式创建一个Autorelease pool，这样所有的release pool会构成一个象CallStack一样的一个栈式结构，在每一个Runloop结束时，当前栈顶的Autorelease pool会被销毁，这样这个pool里的每个Object会被release。](http://blog.sina.com.cn/s/blog_8c87ba3b0100tgfs.html)\n\n以下对于autoreleasepool的分析参考了[@雷纯锋的技术博客](http://blog.leichunfeng.com/blog/2015/05/31/objective-c-autorelease-pool-implementation-principle/)\n文中的实验在部分新设备上已经不再成立，因此结合自己的想法重新做一遍测试。\n\n首先，从上文我们可以知道，autoreleasepool就是延迟调用了realease，那么我们来实验一下它到底是什么时候realease的。\n### 场景1\n```\n__weak NSString *string_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 1.1\n    NSString *string = [NSString stringWithFormat:@\"I'm here!\"];\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    string_weak_ = string;\n\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    \n    NSLog(@\"string_weak_@viewWillAppear: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    \n    NSLog(@\"string_weak_@viewDidAppear: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n__strong NSString *string_strong_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 1.2\n    NSString *string = [NSString stringWithFormat:@\"I'm here!\"];\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    string_strong_ = string;\n\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    NSLog(@\"string_strong_@viewDidLoad: %@ with retainCount: %@\", string_strong_, [string_strong_ valueForKey:@\"retainCount\"]);\n}\n\n// ...省略\n```\n\n```\n__weak Fraction *fraction_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 1.3\n    Fraction *fraction = [[Fraction alloc] init];\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    fraction_weak_ = fraction;\n\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n__strong Fraction *fraction_strong_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 1.4\n    Fraction *fraction = [[Fraction alloc] init];\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    fraction_strong_ = fraction;\n\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    NSLog(@\"fraction_strong_@viewDidLoad: %@ with retainCount: %@\", fraction_strong_, [fraction_strong_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n// 场景1.1(__weak NSString *) 结果 \n2016-08-15 14:26:03.193 LKTestAutoreleasePool[36540:6293792] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string_weak_@viewDidLoad: I'm here! with retainCount: 4\n2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string_weak_@viewWillAppear: I'm here! with retainCount: 3\n2016-08-15 14:26:03.198 LKTestAutoreleasePool[36540:6293792] string_weak_@viewDidAppear: (null) with retainCount: (null)\n\n// 场景1.2(__strong NSString *) 结果 \n2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string@viewDidLoad: I'm here! with retainCount: 3\n2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string_strong_@viewDidLoad: I'm here! with retainCount: 3\n2016-08-15 14:27:06.620 LKTestAutoreleasePool[36567:6295671] string_strong_@viewWillAppear: I'm here! with retainCount: 2\n2016-08-15 14:27:06.623 LKTestAutoreleasePool[36567:6295671] string_strong_@viewDidAppear: I'm here! with retainCount: 1\n\n// 场景1.3(__weak Fraction *) 结果\n2016-08-15 14:31:36.558 LKTestAutoreleasePool[36655:6301737] fraction@viewDidLoad: <Fraction: 0x7fd942f1dfd0> with retainCount: 1\n2016-08-15 14:31:36.558 LKTestAutoreleasePool[36655:6301737] fraction@viewDidLoad: <Fraction: 0x7fd942f1dfd0> with retainCount: 1\n2016-08-15 14:31:36.559 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewDidLoad: <Fraction: 0x7fd942f1dfd0> with retainCount: 3\n2016-08-15 14:31:36.559 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewWillAppear: (null) with retainCount: (null)\n2016-08-15 14:31:36.564 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewDidAppear: (null) with retainCount: (null)\n\n// 场景1.4(__strong Fraction *) 结果\n2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction@viewDidLoad: <Fraction: 0x7fd9e9d9ec90> with retainCount: 1\n2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction@viewDidLoad: <Fraction: 0x7fd9e9d9ec90> with retainCount: 2\n2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewDidLoad: <Fraction: 0x7fd9e9d9ec90> with retainCount: 2\n2016-08-15 14:32:09.510 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewWillAppear: <Fraction: 0x7fd9e9d9ec90> with retainCount: 1\n2016-08-15 14:32:09.514 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewDidAppear: <Fraction: 0x7fd9e9d9ec90> with retainCount: 1\n```\n> 我们使用了一个全局的 __weak 变量 string_weak_ 来指向它。因为 __weak 变量有一个特性就是它不会影响所指向对象的生命周期，这里我们正是利用了这个特性。 \n\n最初的两个测试使用了NSString对象，但是常量NSString对象存在常量区，不会dealloc影响了测试，于是换成了前文中的分数类进行测试。\n场景1.3中fraction_weak_对象被自动添加到当前的autorealeasepool，当viewDidLoad返回时，被回收。\n\n### 场景2\n```\n__weak NSString *string_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 2.1\n    @autoreleasepool {\n        NSString *string = [NSString stringWithFormat:@\"I'm here!\"];\n        NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n        string_weak_ = string;\n        NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n        NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n    }\n\n    NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n__weak Fraction *fraction_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 2.2\n    @autoreleasepool {\n        Fraction *fraction = [[Fraction alloc] init];\n        NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n        fraction_weak_ = fraction;\n        NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n        NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n    }\n\n    NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n// 场景2.1(__weak NSString *) 结果\n2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidLoad: I'm here! with retainCount: 4\n2016-08-15 14:58:39.532 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidLoad: (null) with retainCount: (null)\n2016-08-15 14:58:39.532 LKTestAutoreleasePool[36863:6327169] string_weak_@viewWillAppear: (null) with retainCount: (null)\n2016-08-15 14:58:39.536 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidAppear: (null) with retainCount: (null)\n\n// 场景2.2(__weak Fraction *) 结果\n2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction@viewDidLoad: <Fraction: 0x7fe429f425e0> with retainCount: 1\n2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction@viewDidLoad: <Fraction: 0x7fe429f425e0> with retainCount: 1\n2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidLoad: <Fraction: 0x7fe429f425e0> with retainCount: 3\n2016-08-15 14:52:03.421 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidLoad: (null) with retainCount: (null)\n2016-08-15 14:52:03.421 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewWillAppear: (null) with retainCount: (null)\n2016-08-15 14:52:03.426 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidAppear: (null) with retainCount: (null)\n```\n\n### 场景3\n```\n__weak NSString *string_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 3.1\n    NSString *string = [NSString stringWithFormat:@\"I'm here!\"];\n    @autoreleasepool {\n        NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n        string_weak_ = string;\n        NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n        NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n    }\n\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n__weak Fraction *fraction_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 3.2\n    Fraction *fraction = [[Fraction alloc] init];\n    @autoreleasepool {\n        NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n        fraction_weak_ = fraction;\n        NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n        NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n    }\n\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n// 场景3.1(__weak NSString *) 结果\n2016-08-15 15:02:00.662 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidLoad: I'm here! with retainCount: 4\n2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidLoad: I'm here! with retainCount: 4\n2016-08-15 15:02:00.664 LKTestAutoreleasePool[36934:6331215] string_weak_@viewWillAppear: I'm here! with retainCount: 3\n2016-08-15 15:02:00.667 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidAppear: (null) with retainCount: (null)\n\n// 场景3.2(__weak Fraction *) 结果\n2016-08-15 14:54:43.872 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 1\n2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 1\n2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 3\n2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 1\n2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 3\n2016-08-15 14:54:43.874 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewWillAppear: (null) with retainCount: (null)\n2016-08-15 14:54:43.878 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidAppear: (null) with retainCount: (null)\n```\n\n再来看@autoreleasepool之后的代码，fraction = [[Fraction alloc] init];\n向Fraction类发送alloc消息，alloc方法我们并未定义，这来自于Fraction的父类NSObject的类方法，为一个Fraction对象分配了内存空间，并返回一个实例对象：\n```\n+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n- (void)dealloc OBJC_SWIFT_UNAVAILABLE(\"use 'deinit' to define a de-initializer\");\n```\n\n随后调用了init方法，同样，这来自于NSObject的实例方法。\n\nfraction对象前的*表示fraction是Fraction对象的指针（引用），就是说fraction并不存储Fraction数据，而是保存了一个Fraction对象在内存中的地址。\n\n而这个fraction对象在初始化时之时分配了空间，获得了他的内存地址，却没有设置值，因此我们setValue，print，得出了分数的值。\nOC中调用方法可以理解为发送消息，因为在程序运行过程中所有OC代码都会被转化为runtime的C语言代码，`[target doSomething];会被转化成objc_msgSend(target, @selector(doSomething));`我们知道实例是对象，而类也是一个对象，而类在runtime中是一个结构体，会通过链表保存它的变量列表和方法列表等，在初始化时，也是根据结构体的数据结构为其分配内存。\n\n提前阅读一些runtime的知识\n[iOS~runtime理解](http://www.jianshu.com/p/927c8384855a)\n[iOS中的runtime应用](http://www.jianshu.com/p/364eab29f4f5)\n","source":"_posts/iOS基础：类、对象和方法.md","raw":"---\ntitle: 'iOS基础: 类、对象和方法'\ndate: 2016-08-14 16:15:39\ncategories: iOS\ntags:\n    - Objective-C\n    - 程序设计基础\n    - 类\n    - 对象\n    - 方法\n    - autoreleasepool\n---\n\n本文是在阅读`Objective-C程序设计  第6版`一书过程中写的学习笔记，文中出现的大部分代码基本与书中相同。\n<!-- more -->\n\n# 什么是对象\n我们知道，OC是在C的基础上设计的`面向对象`的程序设计语言，而C则是`过程性语言`。\n以我的理解，所谓的过程性语言，是为了实现某种功能所设计的，比如我想要将两个整数累加，返回它们的和，这是我的目的，所以C语言中完成这种目的一段代码称为函数，这个函数的功能是累加两个整数。\n而所谓的面相对象，这个函数则被看作一个真实存在的物件，这里我们叫它计算器，当我们想要累加两个整数时，创建了一个计算器对象，然后再调用它本身的功能（方法）来实现我们的目的。\n\n我认为可以这样理解，过程性语言中，“我”是主体，当“我”想要做什么时，创建了“我”需要的函数然后去使用它；而面向对象，每个对象都是独立存在的主体，它们可以为“我”服务。\n\n# 类、方法\n**Fraction类**\n```\n#import <Foundation/Foundation.h>\n\n@interface Fraction : NSObject\n\n- (void)print;\n- (void)setNumerator: (int)n;\n- (void)setDenominator: (int)d;\n\n@end\n```\n\n```\n#import \"Fraction.h\"\n\n@implementation Fraction {\n    int numerator;\n    int denominator;\n}\n\n- (void)print {\n    NSLog(@\"%i / %i\", numerator, denominator);\n}\n\n- (void)setNumerator:(int)n {\n    numerator = n;\n}\n\n- (void)setDenominator:(int)d {\n    denominator = d;\n}\n@end\n```\n\n**main函数**\n```\n#import <Foundation/Foundation.h>\n#import \"Fraction.h\"\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // insert code here...\n        Fraction *fraction;\n        \n        fraction = [[Fraction alloc] init];\n        [fraction setNumerator:1];\n        [fraction setDenominator:3];\n        \n        NSLog(@\"The value of fracton is: \");\n        [fraction print];\n    }\n    return 0;\n}\n```\n\n先看Fraction类，这里我们只关注它的头文件，这个对象告诉我们，它的功能是通过分子和分母获得一个分数，它有3个对外部可见的方法，打印分数、获得分子、获得分母。这里我们可以完全不必理会它的实现，只需要获知并且相信它很好地实现了这三个功能。\n另外@符号在\"\"前，表示这是常量NSString对象。\n\n然后来看main函数。\n第一行中，我们就看到了`@autoreleasepool`，这是什么呢？\n## autoreleasepool\n嵌套在其后的代码块会被放在“自动释放池”这一语境中执行。\n什么是“自动释放池”？首先我们需要知道什么是Runloop，Runloop是一个while循环，当然这是一个很复杂的循环。可以理解为一个App中有许多个Runloop，它们在监听着用户操作、管理着内存以及执行一些操作。以后我们再来关心Runloop的具体实现。\n\n[对于每一个Runloop， 系统会隐式创建一个Autorelease pool，这样所有的release pool会构成一个象CallStack一样的一个栈式结构，在每一个Runloop结束时，当前栈顶的Autorelease pool会被销毁，这样这个pool里的每个Object会被release。](http://blog.sina.com.cn/s/blog_8c87ba3b0100tgfs.html)\n\n以下对于autoreleasepool的分析参考了[@雷纯锋的技术博客](http://blog.leichunfeng.com/blog/2015/05/31/objective-c-autorelease-pool-implementation-principle/)\n文中的实验在部分新设备上已经不再成立，因此结合自己的想法重新做一遍测试。\n\n首先，从上文我们可以知道，autoreleasepool就是延迟调用了realease，那么我们来实验一下它到底是什么时候realease的。\n### 场景1\n```\n__weak NSString *string_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 1.1\n    NSString *string = [NSString stringWithFormat:@\"I'm here!\"];\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    string_weak_ = string;\n\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    \n    NSLog(@\"string_weak_@viewWillAppear: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    \n    NSLog(@\"string_weak_@viewDidAppear: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n__strong NSString *string_strong_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 1.2\n    NSString *string = [NSString stringWithFormat:@\"I'm here!\"];\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    string_strong_ = string;\n\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    NSLog(@\"string_strong_@viewDidLoad: %@ with retainCount: %@\", string_strong_, [string_strong_ valueForKey:@\"retainCount\"]);\n}\n\n// ...省略\n```\n\n```\n__weak Fraction *fraction_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 1.3\n    Fraction *fraction = [[Fraction alloc] init];\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    fraction_weak_ = fraction;\n\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n__strong Fraction *fraction_strong_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 1.4\n    Fraction *fraction = [[Fraction alloc] init];\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    fraction_strong_ = fraction;\n\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    NSLog(@\"fraction_strong_@viewDidLoad: %@ with retainCount: %@\", fraction_strong_, [fraction_strong_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n// 场景1.1(__weak NSString *) 结果 \n2016-08-15 14:26:03.193 LKTestAutoreleasePool[36540:6293792] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string_weak_@viewDidLoad: I'm here! with retainCount: 4\n2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string_weak_@viewWillAppear: I'm here! with retainCount: 3\n2016-08-15 14:26:03.198 LKTestAutoreleasePool[36540:6293792] string_weak_@viewDidAppear: (null) with retainCount: (null)\n\n// 场景1.2(__strong NSString *) 结果 \n2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string@viewDidLoad: I'm here! with retainCount: 3\n2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string_strong_@viewDidLoad: I'm here! with retainCount: 3\n2016-08-15 14:27:06.620 LKTestAutoreleasePool[36567:6295671] string_strong_@viewWillAppear: I'm here! with retainCount: 2\n2016-08-15 14:27:06.623 LKTestAutoreleasePool[36567:6295671] string_strong_@viewDidAppear: I'm here! with retainCount: 1\n\n// 场景1.3(__weak Fraction *) 结果\n2016-08-15 14:31:36.558 LKTestAutoreleasePool[36655:6301737] fraction@viewDidLoad: <Fraction: 0x7fd942f1dfd0> with retainCount: 1\n2016-08-15 14:31:36.558 LKTestAutoreleasePool[36655:6301737] fraction@viewDidLoad: <Fraction: 0x7fd942f1dfd0> with retainCount: 1\n2016-08-15 14:31:36.559 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewDidLoad: <Fraction: 0x7fd942f1dfd0> with retainCount: 3\n2016-08-15 14:31:36.559 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewWillAppear: (null) with retainCount: (null)\n2016-08-15 14:31:36.564 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewDidAppear: (null) with retainCount: (null)\n\n// 场景1.4(__strong Fraction *) 结果\n2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction@viewDidLoad: <Fraction: 0x7fd9e9d9ec90> with retainCount: 1\n2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction@viewDidLoad: <Fraction: 0x7fd9e9d9ec90> with retainCount: 2\n2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewDidLoad: <Fraction: 0x7fd9e9d9ec90> with retainCount: 2\n2016-08-15 14:32:09.510 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewWillAppear: <Fraction: 0x7fd9e9d9ec90> with retainCount: 1\n2016-08-15 14:32:09.514 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewDidAppear: <Fraction: 0x7fd9e9d9ec90> with retainCount: 1\n```\n> 我们使用了一个全局的 __weak 变量 string_weak_ 来指向它。因为 __weak 变量有一个特性就是它不会影响所指向对象的生命周期，这里我们正是利用了这个特性。 \n\n最初的两个测试使用了NSString对象，但是常量NSString对象存在常量区，不会dealloc影响了测试，于是换成了前文中的分数类进行测试。\n场景1.3中fraction_weak_对象被自动添加到当前的autorealeasepool，当viewDidLoad返回时，被回收。\n\n### 场景2\n```\n__weak NSString *string_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 2.1\n    @autoreleasepool {\n        NSString *string = [NSString stringWithFormat:@\"I'm here!\"];\n        NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n        string_weak_ = string;\n        NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n        NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n    }\n\n    NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n__weak Fraction *fraction_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 2.2\n    @autoreleasepool {\n        Fraction *fraction = [[Fraction alloc] init];\n        NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n        fraction_weak_ = fraction;\n        NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n        NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n    }\n\n    NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n// 场景2.1(__weak NSString *) 结果\n2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidLoad: I'm here! with retainCount: 4\n2016-08-15 14:58:39.532 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidLoad: (null) with retainCount: (null)\n2016-08-15 14:58:39.532 LKTestAutoreleasePool[36863:6327169] string_weak_@viewWillAppear: (null) with retainCount: (null)\n2016-08-15 14:58:39.536 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidAppear: (null) with retainCount: (null)\n\n// 场景2.2(__weak Fraction *) 结果\n2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction@viewDidLoad: <Fraction: 0x7fe429f425e0> with retainCount: 1\n2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction@viewDidLoad: <Fraction: 0x7fe429f425e0> with retainCount: 1\n2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidLoad: <Fraction: 0x7fe429f425e0> with retainCount: 3\n2016-08-15 14:52:03.421 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidLoad: (null) with retainCount: (null)\n2016-08-15 14:52:03.421 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewWillAppear: (null) with retainCount: (null)\n2016-08-15 14:52:03.426 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidAppear: (null) with retainCount: (null)\n```\n\n### 场景3\n```\n__weak NSString *string_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 3.1\n    NSString *string = [NSString stringWithFormat:@\"I'm here!\"];\n    @autoreleasepool {\n        NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n        string_weak_ = string;\n        NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n        NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n    }\n\n    NSLog(@\"string@viewDidLoad: %@ with retainCount: %@\", string, [string valueForKey:@\"retainCount\"]);\n    NSLog(@\"string_weak_@viewDidLoad: %@ with retainCount: %@\", string_weak_, [string_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n__weak Fraction *fraction_weak_ = nil;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    // 场景 3.2\n    Fraction *fraction = [[Fraction alloc] init];\n    @autoreleasepool {\n        NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n        fraction_weak_ = fraction;\n        NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n        NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n    }\n\n    NSLog(@\"fraction@viewDidLoad: %@ with retainCount: %@\", fraction, [fraction valueForKey:@\"retainCount\"]);\n    NSLog(@\"fraction_weak_@viewDidLoad: %@ with retainCount: %@\", fraction_weak_, [fraction_weak_ valueForKey:@\"retainCount\"]);\n}\n```\n\n```\n// 场景3.1(__weak NSString *) 结果\n2016-08-15 15:02:00.662 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidLoad: I'm here! with retainCount: 4\n2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I'm here! with retainCount: 2\n2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidLoad: I'm here! with retainCount: 4\n2016-08-15 15:02:00.664 LKTestAutoreleasePool[36934:6331215] string_weak_@viewWillAppear: I'm here! with retainCount: 3\n2016-08-15 15:02:00.667 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidAppear: (null) with retainCount: (null)\n\n// 场景3.2(__weak Fraction *) 结果\n2016-08-15 14:54:43.872 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 1\n2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 1\n2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 3\n2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 1\n2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidLoad: <Fraction: 0x7ff031737ab0> with retainCount: 3\n2016-08-15 14:54:43.874 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewWillAppear: (null) with retainCount: (null)\n2016-08-15 14:54:43.878 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidAppear: (null) with retainCount: (null)\n```\n\n再来看@autoreleasepool之后的代码，fraction = [[Fraction alloc] init];\n向Fraction类发送alloc消息，alloc方法我们并未定义，这来自于Fraction的父类NSObject的类方法，为一个Fraction对象分配了内存空间，并返回一个实例对象：\n```\n+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n- (void)dealloc OBJC_SWIFT_UNAVAILABLE(\"use 'deinit' to define a de-initializer\");\n```\n\n随后调用了init方法，同样，这来自于NSObject的实例方法。\n\nfraction对象前的*表示fraction是Fraction对象的指针（引用），就是说fraction并不存储Fraction数据，而是保存了一个Fraction对象在内存中的地址。\n\n而这个fraction对象在初始化时之时分配了空间，获得了他的内存地址，却没有设置值，因此我们setValue，print，得出了分数的值。\nOC中调用方法可以理解为发送消息，因为在程序运行过程中所有OC代码都会被转化为runtime的C语言代码，`[target doSomething];会被转化成objc_msgSend(target, @selector(doSomething));`我们知道实例是对象，而类也是一个对象，而类在runtime中是一个结构体，会通过链表保存它的变量列表和方法列表等，在初始化时，也是根据结构体的数据结构为其分配内存。\n\n提前阅读一些runtime的知识\n[iOS~runtime理解](http://www.jianshu.com/p/927c8384855a)\n[iOS中的runtime应用](http://www.jianshu.com/p/364eab29f4f5)\n","slug":"iOS基础：类、对象和方法","published":1,"updated":"2016-08-16T09:05:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisig8xne0000zpk554qwdtek","content":"<p>本文是在阅读<code>Objective-C程序设计  第6版</code>一书过程中写的学习笔记，文中出现的大部分代码基本与书中相同。<br><a id=\"more\"></a></p>\n<h1 id=\"什么是对象\"><a href=\"#什么是对象\" class=\"headerlink\" title=\"什么是对象\"></a>什么是对象</h1><p>我们知道，OC是在C的基础上设计的<code>面向对象</code>的程序设计语言，而C则是<code>过程性语言</code>。<br>以我的理解，所谓的过程性语言，是为了实现某种功能所设计的，比如我想要将两个整数累加，返回它们的和，这是我的目的，所以C语言中完成这种目的一段代码称为函数，这个函数的功能是累加两个整数。<br>而所谓的面相对象，这个函数则被看作一个真实存在的物件，这里我们叫它计算器，当我们想要累加两个整数时，创建了一个计算器对象，然后再调用它本身的功能（方法）来实现我们的目的。</p>\n<p>我认为可以这样理解，过程性语言中，“我”是主体，当“我”想要做什么时，创建了“我”需要的函数然后去使用它；而面向对象，每个对象都是独立存在的主体，它们可以为“我”服务。</p>\n<h1 id=\"类、方法\"><a href=\"#类、方法\" class=\"headerlink\" title=\"类、方法\"></a>类、方法</h1><p><strong>Fraction类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface Fraction : NSObject</div><div class=\"line\"></div><div class=\"line\">- (void)print;</div><div class=\"line\">- (void)setNumerator: (int)n;</div><div class=\"line\">- (void)setDenominator: (int)d;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;Fraction.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation Fraction &#123;</div><div class=\"line\">    int numerator;</div><div class=\"line\">    int denominator;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)print &#123;</div><div class=\"line\">    NSLog(@&quot;%i / %i&quot;, numerator, denominator);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setNumerator:(int)n &#123;</div><div class=\"line\">    numerator = n;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setDenominator:(int)d &#123;</div><div class=\"line\">    denominator = d;</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p><strong>main函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &quot;Fraction.h&quot;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        // insert code here...</div><div class=\"line\">        Fraction *fraction;</div><div class=\"line\">        </div><div class=\"line\">        fraction = [[Fraction alloc] init];</div><div class=\"line\">        [fraction setNumerator:1];</div><div class=\"line\">        [fraction setDenominator:3];</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@&quot;The value of fracton is: &quot;);</div><div class=\"line\">        [fraction print];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>先看Fraction类，这里我们只关注它的头文件，这个对象告诉我们，它的功能是通过分子和分母获得一个分数，它有3个对外部可见的方法，打印分数、获得分子、获得分母。这里我们可以完全不必理会它的实现，只需要获知并且相信它很好地实现了这三个功能。<br>另外@符号在””前，表示这是常量NSString对象。</p>\n<p>然后来看main函数。<br>第一行中，我们就看到了<code>@autoreleasepool</code>，这是什么呢？</p>\n<h2 id=\"autoreleasepool\"><a href=\"#autoreleasepool\" class=\"headerlink\" title=\"autoreleasepool\"></a>autoreleasepool</h2><p>嵌套在其后的代码块会被放在“自动释放池”这一语境中执行。<br>什么是“自动释放池”？首先我们需要知道什么是Runloop，Runloop是一个while循环，当然这是一个很复杂的循环。可以理解为一个App中有许多个Runloop，它们在监听着用户操作、管理着内存以及执行一些操作。以后我们再来关心Runloop的具体实现。</p>\n<p><a href=\"http://blog.sina.com.cn/s/blog_8c87ba3b0100tgfs.html\" target=\"_blank\" rel=\"external\">对于每一个Runloop， 系统会隐式创建一个Autorelease pool，这样所有的release pool会构成一个象CallStack一样的一个栈式结构，在每一个Runloop结束时，当前栈顶的Autorelease pool会被销毁，这样这个pool里的每个Object会被release。</a></p>\n<p>以下对于autoreleasepool的分析参考了<a href=\"http://blog.leichunfeng.com/blog/2015/05/31/objective-c-autorelease-pool-implementation-principle/\" target=\"_blank\" rel=\"external\">@雷纯锋的技术博客</a><br>文中的实验在部分新设备上已经不再成立，因此结合自己的想法重新做一遍测试。</p>\n<p>首先，从上文我们可以知道，autoreleasepool就是延迟调用了realease，那么我们来实验一下它到底是什么时候realease的。</p>\n<h3 id=\"场景1\"><a href=\"#场景1\" class=\"headerlink\" title=\"场景1\"></a>场景1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak NSString *string_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 1.1</div><div class=\"line\">    NSString *string = [NSString stringWithFormat:@&quot;I&apos;m here!&quot;];</div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    string_weak_ = string;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)viewWillAppear:(BOOL)animated &#123;</div><div class=\"line\">    [super viewWillAppear:animated];</div><div class=\"line\">    </div><div class=\"line\">    NSLog(@&quot;string_weak_@viewWillAppear: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidAppear:(BOOL)animated &#123;</div><div class=\"line\">    [super viewDidAppear:animated];</div><div class=\"line\">    </div><div class=\"line\">    NSLog(@&quot;string_weak_@viewDidAppear: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">__strong NSString *string_strong_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 1.2</div><div class=\"line\">    NSString *string = [NSString stringWithFormat:@&quot;I&apos;m here!&quot;];</div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    string_strong_ = string;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;string_strong_@viewDidLoad: %@ with retainCount: %@&quot;, string_strong_, [string_strong_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// ...省略</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak Fraction *fraction_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 1.3</div><div class=\"line\">    Fraction *fraction = [[Fraction alloc] init];</div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    fraction_weak_ = fraction;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">__strong Fraction *fraction_strong_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 1.4</div><div class=\"line\">    Fraction *fraction = [[Fraction alloc] init];</div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    fraction_strong_ = fraction;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;fraction_strong_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_strong_, [fraction_strong_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 场景1.1(__weak NSString *) 结果 </div><div class=\"line\">2016-08-15 14:26:03.193 LKTestAutoreleasePool[36540:6293792] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string_weak_@viewDidLoad: I&apos;m here! with retainCount: 4</div><div class=\"line\">2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string_weak_@viewWillAppear: I&apos;m here! with retainCount: 3</div><div class=\"line\">2016-08-15 14:26:03.198 LKTestAutoreleasePool[36540:6293792] string_weak_@viewDidAppear: (null) with retainCount: (null)</div><div class=\"line\"></div><div class=\"line\">// 场景1.2(__strong NSString *) 结果 </div><div class=\"line\">2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string@viewDidLoad: I&apos;m here! with retainCount: 3</div><div class=\"line\">2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string_strong_@viewDidLoad: I&apos;m here! with retainCount: 3</div><div class=\"line\">2016-08-15 14:27:06.620 LKTestAutoreleasePool[36567:6295671] string_strong_@viewWillAppear: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:27:06.623 LKTestAutoreleasePool[36567:6295671] string_strong_@viewDidAppear: I&apos;m here! with retainCount: 1</div><div class=\"line\"></div><div class=\"line\">// 场景1.3(__weak Fraction *) 结果</div><div class=\"line\">2016-08-15 14:31:36.558 LKTestAutoreleasePool[36655:6301737] fraction@viewDidLoad: &lt;Fraction: 0x7fd942f1dfd0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:31:36.558 LKTestAutoreleasePool[36655:6301737] fraction@viewDidLoad: &lt;Fraction: 0x7fd942f1dfd0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:31:36.559 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewDidLoad: &lt;Fraction: 0x7fd942f1dfd0&gt; with retainCount: 3</div><div class=\"line\">2016-08-15 14:31:36.559 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewWillAppear: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:31:36.564 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewDidAppear: (null) with retainCount: (null)</div><div class=\"line\"></div><div class=\"line\">// 场景1.4(__strong Fraction *) 结果</div><div class=\"line\">2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction@viewDidLoad: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction@viewDidLoad: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 2</div><div class=\"line\">2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewDidLoad: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 2</div><div class=\"line\">2016-08-15 14:32:09.510 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewWillAppear: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:32:09.514 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewDidAppear: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 1</div></pre></td></tr></table></figure>\n<blockquote>\n<p>我们使用了一个全局的 <strong>weak 变量 string<em>weak</em> 来指向它。因为 </strong>weak 变量有一个特性就是它不会影响所指向对象的生命周期，这里我们正是利用了这个特性。 </p>\n</blockquote>\n<p>最初的两个测试使用了NSString对象，但是常量NSString对象存在常量区，不会dealloc影响了测试，于是换成了前文中的分数类进行测试。<br>场景1.3中fraction<em>weak</em>对象被自动添加到当前的autorealeasepool，当viewDidLoad返回时，被回收。</p>\n<h3 id=\"场景2\"><a href=\"#场景2\" class=\"headerlink\" title=\"场景2\"></a>场景2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak NSString *string_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 2.1</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        NSString *string = [NSString stringWithFormat:@&quot;I&apos;m here!&quot;];</div><div class=\"line\">        NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        string_weak_ = string;</div><div class=\"line\">        NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak Fraction *fraction_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 2.2</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        Fraction *fraction = [[Fraction alloc] init];</div><div class=\"line\">        NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        fraction_weak_ = fraction;</div><div class=\"line\">        NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 场景2.1(__weak NSString *) 结果</div><div class=\"line\">2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidLoad: I&apos;m here! with retainCount: 4</div><div class=\"line\">2016-08-15 14:58:39.532 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidLoad: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:58:39.532 LKTestAutoreleasePool[36863:6327169] string_weak_@viewWillAppear: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:58:39.536 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidAppear: (null) with retainCount: (null)</div><div class=\"line\"></div><div class=\"line\">// 场景2.2(__weak Fraction *) 结果</div><div class=\"line\">2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction@viewDidLoad: &lt;Fraction: 0x7fe429f425e0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction@viewDidLoad: &lt;Fraction: 0x7fe429f425e0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidLoad: &lt;Fraction: 0x7fe429f425e0&gt; with retainCount: 3</div><div class=\"line\">2016-08-15 14:52:03.421 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidLoad: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:52:03.421 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewWillAppear: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:52:03.426 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidAppear: (null) with retainCount: (null)</div></pre></td></tr></table></figure>\n<h3 id=\"场景3\"><a href=\"#场景3\" class=\"headerlink\" title=\"场景3\"></a>场景3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak NSString *string_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 3.1</div><div class=\"line\">    NSString *string = [NSString stringWithFormat:@&quot;I&apos;m here!&quot;];</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        string_weak_ = string;</div><div class=\"line\">        NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak Fraction *fraction_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 3.2</div><div class=\"line\">    Fraction *fraction = [[Fraction alloc] init];</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        fraction_weak_ = fraction;</div><div class=\"line\">        NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 场景3.1(__weak NSString *) 结果</div><div class=\"line\">2016-08-15 15:02:00.662 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidLoad: I&apos;m here! with retainCount: 4</div><div class=\"line\">2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidLoad: I&apos;m here! with retainCount: 4</div><div class=\"line\">2016-08-15 15:02:00.664 LKTestAutoreleasePool[36934:6331215] string_weak_@viewWillAppear: I&apos;m here! with retainCount: 3</div><div class=\"line\">2016-08-15 15:02:00.667 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidAppear: (null) with retainCount: (null)</div><div class=\"line\"></div><div class=\"line\">// 场景3.2(__weak Fraction *) 结果</div><div class=\"line\">2016-08-15 14:54:43.872 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 3</div><div class=\"line\">2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 3</div><div class=\"line\">2016-08-15 14:54:43.874 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewWillAppear: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:54:43.878 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidAppear: (null) with retainCount: (null)</div></pre></td></tr></table></figure>\n<p>再来看@autoreleasepool之后的代码，fraction = [[Fraction alloc] init];<br>向Fraction类发送alloc消息，alloc方法我们并未定义，这来自于Fraction的父类NSObject的类方法，为一个Fraction对象分配了内存空间，并返回一个实例对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</div><div class=\"line\">+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</div><div class=\"line\">+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</div><div class=\"line\">- (void)dealloc OBJC_SWIFT_UNAVAILABLE(&quot;use &apos;deinit&apos; to define a de-initializer&quot;);</div></pre></td></tr></table></figure></p>\n<p>随后调用了init方法，同样，这来自于NSObject的实例方法。</p>\n<p>fraction对象前的*表示fraction是Fraction对象的指针（引用），就是说fraction并不存储Fraction数据，而是保存了一个Fraction对象在内存中的地址。</p>\n<p>而这个fraction对象在初始化时之时分配了空间，获得了他的内存地址，却没有设置值，因此我们setValue，print，得出了分数的值。<br>OC中调用方法可以理解为发送消息，因为在程序运行过程中所有OC代码都会被转化为runtime的C语言代码，<code>[target doSomething];会被转化成objc_msgSend(target, @selector(doSomething));</code>我们知道实例是对象，而类也是一个对象，而类在runtime中是一个结构体，会通过链表保存它的变量列表和方法列表等，在初始化时，也是根据结构体的数据结构为其分配内存。</p>\n<p>提前阅读一些runtime的知识<br><a href=\"http://www.jianshu.com/p/927c8384855a\" target=\"_blank\" rel=\"external\">iOS~runtime理解</a><br><a href=\"http://www.jianshu.com/p/364eab29f4f5\" target=\"_blank\" rel=\"external\">iOS中的runtime应用</a></p>\n","excerpt":"<p>本文是在阅读<code>Objective-C程序设计  第6版</code>一书过程中写的学习笔记，文中出现的大部分代码基本与书中相同。<br>","more":"</p>\n<h1 id=\"什么是对象\"><a href=\"#什么是对象\" class=\"headerlink\" title=\"什么是对象\"></a>什么是对象</h1><p>我们知道，OC是在C的基础上设计的<code>面向对象</code>的程序设计语言，而C则是<code>过程性语言</code>。<br>以我的理解，所谓的过程性语言，是为了实现某种功能所设计的，比如我想要将两个整数累加，返回它们的和，这是我的目的，所以C语言中完成这种目的一段代码称为函数，这个函数的功能是累加两个整数。<br>而所谓的面相对象，这个函数则被看作一个真实存在的物件，这里我们叫它计算器，当我们想要累加两个整数时，创建了一个计算器对象，然后再调用它本身的功能（方法）来实现我们的目的。</p>\n<p>我认为可以这样理解，过程性语言中，“我”是主体，当“我”想要做什么时，创建了“我”需要的函数然后去使用它；而面向对象，每个对象都是独立存在的主体，它们可以为“我”服务。</p>\n<h1 id=\"类、方法\"><a href=\"#类、方法\" class=\"headerlink\" title=\"类、方法\"></a>类、方法</h1><p><strong>Fraction类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface Fraction : NSObject</div><div class=\"line\"></div><div class=\"line\">- (void)print;</div><div class=\"line\">- (void)setNumerator: (int)n;</div><div class=\"line\">- (void)setDenominator: (int)d;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;Fraction.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation Fraction &#123;</div><div class=\"line\">    int numerator;</div><div class=\"line\">    int denominator;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)print &#123;</div><div class=\"line\">    NSLog(@&quot;%i / %i&quot;, numerator, denominator);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setNumerator:(int)n &#123;</div><div class=\"line\">    numerator = n;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setDenominator:(int)d &#123;</div><div class=\"line\">    denominator = d;</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p><strong>main函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &quot;Fraction.h&quot;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        // insert code here...</div><div class=\"line\">        Fraction *fraction;</div><div class=\"line\">        </div><div class=\"line\">        fraction = [[Fraction alloc] init];</div><div class=\"line\">        [fraction setNumerator:1];</div><div class=\"line\">        [fraction setDenominator:3];</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@&quot;The value of fracton is: &quot;);</div><div class=\"line\">        [fraction print];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>先看Fraction类，这里我们只关注它的头文件，这个对象告诉我们，它的功能是通过分子和分母获得一个分数，它有3个对外部可见的方法，打印分数、获得分子、获得分母。这里我们可以完全不必理会它的实现，只需要获知并且相信它很好地实现了这三个功能。<br>另外@符号在””前，表示这是常量NSString对象。</p>\n<p>然后来看main函数。<br>第一行中，我们就看到了<code>@autoreleasepool</code>，这是什么呢？</p>\n<h2 id=\"autoreleasepool\"><a href=\"#autoreleasepool\" class=\"headerlink\" title=\"autoreleasepool\"></a>autoreleasepool</h2><p>嵌套在其后的代码块会被放在“自动释放池”这一语境中执行。<br>什么是“自动释放池”？首先我们需要知道什么是Runloop，Runloop是一个while循环，当然这是一个很复杂的循环。可以理解为一个App中有许多个Runloop，它们在监听着用户操作、管理着内存以及执行一些操作。以后我们再来关心Runloop的具体实现。</p>\n<p><a href=\"http://blog.sina.com.cn/s/blog_8c87ba3b0100tgfs.html\">对于每一个Runloop， 系统会隐式创建一个Autorelease pool，这样所有的release pool会构成一个象CallStack一样的一个栈式结构，在每一个Runloop结束时，当前栈顶的Autorelease pool会被销毁，这样这个pool里的每个Object会被release。</a></p>\n<p>以下对于autoreleasepool的分析参考了<a href=\"http://blog.leichunfeng.com/blog/2015/05/31/objective-c-autorelease-pool-implementation-principle/\">@雷纯锋的技术博客</a><br>文中的实验在部分新设备上已经不再成立，因此结合自己的想法重新做一遍测试。</p>\n<p>首先，从上文我们可以知道，autoreleasepool就是延迟调用了realease，那么我们来实验一下它到底是什么时候realease的。</p>\n<h3 id=\"场景1\"><a href=\"#场景1\" class=\"headerlink\" title=\"场景1\"></a>场景1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak NSString *string_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 1.1</div><div class=\"line\">    NSString *string = [NSString stringWithFormat:@&quot;I&apos;m here!&quot;];</div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    string_weak_ = string;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)viewWillAppear:(BOOL)animated &#123;</div><div class=\"line\">    [super viewWillAppear:animated];</div><div class=\"line\">    </div><div class=\"line\">    NSLog(@&quot;string_weak_@viewWillAppear: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidAppear:(BOOL)animated &#123;</div><div class=\"line\">    [super viewDidAppear:animated];</div><div class=\"line\">    </div><div class=\"line\">    NSLog(@&quot;string_weak_@viewDidAppear: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">__strong NSString *string_strong_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 1.2</div><div class=\"line\">    NSString *string = [NSString stringWithFormat:@&quot;I&apos;m here!&quot;];</div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    string_strong_ = string;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;string_strong_@viewDidLoad: %@ with retainCount: %@&quot;, string_strong_, [string_strong_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// ...省略</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak Fraction *fraction_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 1.3</div><div class=\"line\">    Fraction *fraction = [[Fraction alloc] init];</div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    fraction_weak_ = fraction;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">__strong Fraction *fraction_strong_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 1.4</div><div class=\"line\">    Fraction *fraction = [[Fraction alloc] init];</div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    fraction_strong_ = fraction;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;fraction_strong_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_strong_, [fraction_strong_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 场景1.1(__weak NSString *) 结果 </div><div class=\"line\">2016-08-15 14:26:03.193 LKTestAutoreleasePool[36540:6293792] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string_weak_@viewDidLoad: I&apos;m here! with retainCount: 4</div><div class=\"line\">2016-08-15 14:26:03.194 LKTestAutoreleasePool[36540:6293792] string_weak_@viewWillAppear: I&apos;m here! with retainCount: 3</div><div class=\"line\">2016-08-15 14:26:03.198 LKTestAutoreleasePool[36540:6293792] string_weak_@viewDidAppear: (null) with retainCount: (null)</div><div class=\"line\"></div><div class=\"line\">// 场景1.2(__strong NSString *) 结果 </div><div class=\"line\">2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string@viewDidLoad: I&apos;m here! with retainCount: 3</div><div class=\"line\">2016-08-15 14:27:06.619 LKTestAutoreleasePool[36567:6295671] string_strong_@viewDidLoad: I&apos;m here! with retainCount: 3</div><div class=\"line\">2016-08-15 14:27:06.620 LKTestAutoreleasePool[36567:6295671] string_strong_@viewWillAppear: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:27:06.623 LKTestAutoreleasePool[36567:6295671] string_strong_@viewDidAppear: I&apos;m here! with retainCount: 1</div><div class=\"line\"></div><div class=\"line\">// 场景1.3(__weak Fraction *) 结果</div><div class=\"line\">2016-08-15 14:31:36.558 LKTestAutoreleasePool[36655:6301737] fraction@viewDidLoad: &lt;Fraction: 0x7fd942f1dfd0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:31:36.558 LKTestAutoreleasePool[36655:6301737] fraction@viewDidLoad: &lt;Fraction: 0x7fd942f1dfd0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:31:36.559 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewDidLoad: &lt;Fraction: 0x7fd942f1dfd0&gt; with retainCount: 3</div><div class=\"line\">2016-08-15 14:31:36.559 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewWillAppear: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:31:36.564 LKTestAutoreleasePool[36655:6301737] fraction_weak_@viewDidAppear: (null) with retainCount: (null)</div><div class=\"line\"></div><div class=\"line\">// 场景1.4(__strong Fraction *) 结果</div><div class=\"line\">2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction@viewDidLoad: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction@viewDidLoad: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 2</div><div class=\"line\">2016-08-15 14:32:09.509 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewDidLoad: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 2</div><div class=\"line\">2016-08-15 14:32:09.510 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewWillAppear: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:32:09.514 LKTestAutoreleasePool[36681:6303031] fraction_strong_@viewDidAppear: &lt;Fraction: 0x7fd9e9d9ec90&gt; with retainCount: 1</div></pre></td></tr></table></figure>\n<blockquote>\n<p>我们使用了一个全局的 <strong>weak 变量 string<em>weak</em> 来指向它。因为 </strong>weak 变量有一个特性就是它不会影响所指向对象的生命周期，这里我们正是利用了这个特性。 </p>\n</blockquote>\n<p>最初的两个测试使用了NSString对象，但是常量NSString对象存在常量区，不会dealloc影响了测试，于是换成了前文中的分数类进行测试。<br>场景1.3中fraction<em>weak</em>对象被自动添加到当前的autorealeasepool，当viewDidLoad返回时，被回收。</p>\n<h3 id=\"场景2\"><a href=\"#场景2\" class=\"headerlink\" title=\"场景2\"></a>场景2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak NSString *string_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 2.1</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        NSString *string = [NSString stringWithFormat:@&quot;I&apos;m here!&quot;];</div><div class=\"line\">        NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        string_weak_ = string;</div><div class=\"line\">        NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak Fraction *fraction_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 2.2</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        Fraction *fraction = [[Fraction alloc] init];</div><div class=\"line\">        NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        fraction_weak_ = fraction;</div><div class=\"line\">        NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 场景2.1(__weak NSString *) 结果</div><div class=\"line\">2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 14:58:39.531 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidLoad: I&apos;m here! with retainCount: 4</div><div class=\"line\">2016-08-15 14:58:39.532 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidLoad: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:58:39.532 LKTestAutoreleasePool[36863:6327169] string_weak_@viewWillAppear: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:58:39.536 LKTestAutoreleasePool[36863:6327169] string_weak_@viewDidAppear: (null) with retainCount: (null)</div><div class=\"line\"></div><div class=\"line\">// 场景2.2(__weak Fraction *) 结果</div><div class=\"line\">2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction@viewDidLoad: &lt;Fraction: 0x7fe429f425e0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction@viewDidLoad: &lt;Fraction: 0x7fe429f425e0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:52:03.420 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidLoad: &lt;Fraction: 0x7fe429f425e0&gt; with retainCount: 3</div><div class=\"line\">2016-08-15 14:52:03.421 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidLoad: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:52:03.421 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewWillAppear: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:52:03.426 LKTestAutoreleasePool[36795:6319455] fraction_weak_@viewDidAppear: (null) with retainCount: (null)</div></pre></td></tr></table></figure>\n<h3 id=\"场景3\"><a href=\"#场景3\" class=\"headerlink\" title=\"场景3\"></a>场景3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak NSString *string_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 3.1</div><div class=\"line\">    NSString *string = [NSString stringWithFormat:@&quot;I&apos;m here!&quot;];</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        string_weak_ = string;</div><div class=\"line\">        NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;string@viewDidLoad: %@ with retainCount: %@&quot;, string, [string valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;string_weak_@viewDidLoad: %@ with retainCount: %@&quot;, string_weak_, [string_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak Fraction *fraction_weak_ = nil;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    // 场景 3.2</div><div class=\"line\">    Fraction *fraction = [[Fraction alloc] init];</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        fraction_weak_ = fraction;</div><div class=\"line\">        NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">        NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;fraction@viewDidLoad: %@ with retainCount: %@&quot;, fraction, [fraction valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">    NSLog(@&quot;fraction_weak_@viewDidLoad: %@ with retainCount: %@&quot;, fraction_weak_, [fraction_weak_ valueForKey:@&quot;retainCount&quot;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 场景3.1(__weak NSString *) 结果</div><div class=\"line\">2016-08-15 15:02:00.662 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidLoad: I&apos;m here! with retainCount: 4</div><div class=\"line\">2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string@viewDidLoad: I&apos;m here! with retainCount: 2</div><div class=\"line\">2016-08-15 15:02:00.663 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidLoad: I&apos;m here! with retainCount: 4</div><div class=\"line\">2016-08-15 15:02:00.664 LKTestAutoreleasePool[36934:6331215] string_weak_@viewWillAppear: I&apos;m here! with retainCount: 3</div><div class=\"line\">2016-08-15 15:02:00.667 LKTestAutoreleasePool[36934:6331215] string_weak_@viewDidAppear: (null) with retainCount: (null)</div><div class=\"line\"></div><div class=\"line\">// 场景3.2(__weak Fraction *) 结果</div><div class=\"line\">2016-08-15 14:54:43.872 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 3</div><div class=\"line\">2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 1</div><div class=\"line\">2016-08-15 14:54:43.873 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidLoad: &lt;Fraction: 0x7ff031737ab0&gt; with retainCount: 3</div><div class=\"line\">2016-08-15 14:54:43.874 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewWillAppear: (null) with retainCount: (null)</div><div class=\"line\">2016-08-15 14:54:43.878 LKTestAutoreleasePool[36821:6322969] fraction_weak_@viewDidAppear: (null) with retainCount: (null)</div></pre></td></tr></table></figure>\n<p>再来看@autoreleasepool之后的代码，fraction = [[Fraction alloc] init];<br>向Fraction类发送alloc消息，alloc方法我们并未定义，这来自于Fraction的父类NSObject的类方法，为一个Fraction对象分配了内存空间，并返回一个实例对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</div><div class=\"line\">+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</div><div class=\"line\">+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</div><div class=\"line\">- (void)dealloc OBJC_SWIFT_UNAVAILABLE(&quot;use &apos;deinit&apos; to define a de-initializer&quot;);</div></pre></td></tr></table></figure></p>\n<p>随后调用了init方法，同样，这来自于NSObject的实例方法。</p>\n<p>fraction对象前的*表示fraction是Fraction对象的指针（引用），就是说fraction并不存储Fraction数据，而是保存了一个Fraction对象在内存中的地址。</p>\n<p>而这个fraction对象在初始化时之时分配了空间，获得了他的内存地址，却没有设置值，因此我们setValue，print，得出了分数的值。<br>OC中调用方法可以理解为发送消息，因为在程序运行过程中所有OC代码都会被转化为runtime的C语言代码，<code>[target doSomething];会被转化成objc_msgSend(target, @selector(doSomething));</code>我们知道实例是对象，而类也是一个对象，而类在runtime中是一个结构体，会通过链表保存它的变量列表和方法列表等，在初始化时，也是根据结构体的数据结构为其分配内存。</p>\n<p>提前阅读一些runtime的知识<br><a href=\"http://www.jianshu.com/p/927c8384855a\">iOS~runtime理解</a><br><a href=\"http://www.jianshu.com/p/364eab29f4f5\">iOS中的runtime应用</a></p>"},{"title":"Objective-C：类的属性和方法","date":"2016-08-16T07:36:56.000Z","_content":"我们知道iOS中的frame由x, y, width, height决定的一个个矩形。\n接下来尝试用一个矩形类来探究如何使用类中的属性和方法。\n<!-- more -->\n\n**坐标类XYPoint。**\n```\n#import <Foundation/Foundation.h>\n\n@interface XYPoint : NSObject\n\n@property int x, y;\n\n- (void)setX:(int)xVal andY:(int)yVal;\n\n@end\n```\n\n```\n#import \"XYPoint.h\"\n\n@implementation XYPoint\n\n-(void)setX:(int)xVal andY:(int)yVal {\n    _x = xVal;\n    _y = yVal;\n}\n\n@end\n```\n\n**矩形类MyRect**\n```\n#import <Foundation/Foundation.h>\n#import \"XYPoint.h\"\n\n@interface MyRect : NSObject\n\n@property (nonatomic) int width, height;\n@property (nonatomic) XYPoint *origin;\n\n- (void)setWidth:(int)w andHeight:(int)h;\n- (int)area;\n- (int)perimeter;\n\n@end\n```\n\n```\n#import \"MyRect.h\"\n\n@implementation MyRect\n\n- (XYPoint *)origin {\n    return _origin;\n}\n\n- (void)setOrigin:(XYPoint *)origin {\n    _origin = origin;\n}\n\n- (void)setWidth:(int)w andHeight:(int)h {\n    _width = w;\n    _height = h;\n}\n\n- (int)area {\n    return _width * _height;\n}\n\n- (int)perimeter {\n    return (_width + _height) * 2;\n}\n\n@end\n```\n\n**main函数**\n```\n#import <Foundation/Foundation.h>\n#import \"MyRect.h\"\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyRect *rect = [[MyRect alloc] init];\n        XYPoint *point = [[XYPoint alloc] init];\n        \n        [point setX:100 andY:200];\n        \n        [rect setWidth:5 andHeight:8];\n        rect.origin = point;\n        \n        NSLog(@\"Rect w = %i, h = %i\", rect.width, rect.height);\n        NSLog(@\"Origin at (%i, %i)\", rect.origin.x, rect.origin.y);\n        \n        [point setX:50 andY:50];\n        NSLog(@\"Origin at (%i, %i)\", rect.origin.x, rect.origin.y);\n//        NSLog(@\"Area = %i, Perimeter = %i\", [rect area], [rect perimeter]);\n    }\n    return 0;\n}\n```\n\nXYPoint类非常简单，x，y属性，加上其set方法。\nMyRect类中有width，height以及一个XYPoint属性，加上一些方法。\nmain函数中是我们编写的测试代码，做一些初始化，赋值，输出的操作。\n\n我们的重点在于MyRect类，这段代码是有问题的。\n首先看头文件，利用@property自动声明get\\set方法。\n再看实现文件，在get方法中报`Use of undeclared indentifier '_origin'`error。说好的在Xcode4.5以后可以省略@synthesize呢？现在我们删除get方法和set方法其中之一，发现error消失了。实际上编译器确实自动添加了@synthesize，默认的实例变量名为`\"_\" + 属性名`。但是当我们同时重写了get\\set方法时，系统就不再自动帮我生成实例变量了。\n\n现在我们加上`@synthesize origin = _origin;`。error彻底消失，我们也可以自由地重写get\\set方法了。\n运行main函数得到结果。\n```\n2016-08-16 15:59:45.763 LKTestPracticeClass[39983:6991728] Rect w = 5, h = 8\n2016-08-16 15:59:45.764 LKTestPracticeClass[39983:6991728] Origin at (100, 200)\n2016-08-16 15:59:45.764 LKTestPracticeClass[39983:6991728] Origin at (50, 50)\nProgram ended with exit code: 0\n```\n\n回到main函数，我们将point对象赋值给rect的属性origin，然后改变point对象的值，为什么rect的origin属性值也随之改变了呢？我们知道C语言中函数的参数都是值传递，那么来看MyRect类中origin的set方法，\n```\n- (void)setOrigin:(XYPoint *)origin {\n    _origin = origin;\n}\n```\norigin是(XYPoint *)类型，这是一个XYPoint类型对象的引用/地址，而`_origin = origin;`只是将这个对象的地址赋值给了实例变量`_origin`，现在，它们指向了同一个内存地址，那么我们改变了这个地址所指向的值，则point对象和rect对象的origin对象值都同时改变了。\n\n如何解决这个问题呢，这里有一个重点的思想，rect对象应该持有一个XYPoint类型的对象，这是它的横纵坐标，这个对象应该有它自己的内存空间，而不是指向一块与rect对象无关的内存。\n\n第一个方案，改造setOrigin方法。\n```\n- (void)setOrigin:(XYPoint *)origin {\n    if (!_origin) {\n        _origin = [[XYPoint alloc] init];\n    }\n    _origin.x = origin.x;\n    _origin.y = origin.y;\n}\n```\n当我们给origin set值时，实例化一块内存空间，然后将传递过来的point对象中x，y一一赋值给新的origin对象。\n运行结果：\n```\n2016-08-16 16:09:37.557 LKTestPracticeClass[40037:6999091] Rect w = 5, h = 8\n2016-08-16 16:09:37.558 LKTestPracticeClass[40037:6999091] Origin at (100, 200)\n2016-08-16 16:09:37.558 LKTestPracticeClass[40037:6999091] Origin at (100, 200)\nProgram ended with exit code: 0\n```\n\n很明显，这生效了，但是在set方法中实例化这让人难受，更舒服的做法是每当我获取origin属性的时候，再做实例化，因为我可能并不会重写set方法，或许我不止这一个set方法，总之set方法太“上游”了，我希望在更底层、更统一的地方做init操作。因此，我们把实例化的代码移动到get中，这也叫做惰性实例化。\n```\n- (XYPoint *)origin {\n    if (!_origin) {\n        _origin = [[XYPoint alloc] init];\n    }\n    return _origin;\n}\n\n- (void)setOrigin:(XYPoint *)origin {\n    _origin.x = origin.x;\n    _origin.y = origin.y;\n}\n```\n运行代码，期待...\n```\n2016-08-16 16:14:26.337 LKTestPracticeClass[40065:7002556] Rect w = 5, h = 8\n2016-08-16 16:14:26.338 LKTestPracticeClass[40065:7002556] Origin at (0, 0)\n2016-08-16 16:14:26.338 LKTestPracticeClass[40065:7002556] Origin at (0, 0)\nProgram ended with exit code: 0\n```\n然而结果是这样的，x，y的值从始至终都是0。\n\n我们检查一下main函数，原来我们从未调用过get方法，origin属性从未指向任何内存，也就是nil，而nil对象中值是从0开始的。那么，让我们在setOrigin之前调用一个get吧。\n```\nrect.origin;\nrect.origin = point;\n```\n运行，\n```\n2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Rect w = 5, h = 8\n2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Origin at (100, 200)\n2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Origin at (100, 200)\nProgram ended with exit code: 0\n```\n很棒，实现了我们的目的。\n\n可是这个get方法调用得莫名其妙，异常丑陋，让我们删掉它，再研究一下MyRect类。我们在set方法中调用一下get不就实现了我们的目的吗？\n于是...\n```\n@synthesize origin = _origin;\n\n- (XYPoint *)origin {\n    if (!_origin) {\n        _origin = [[XYPoint alloc] init];\n    }\n    return _origin;\n}\n\n- (void)setOrigin:(XYPoint *)origin {\n    self.origin.x = origin.x;\n    self.origin.y = origin.y;\n}\n```\n这里的self.origin就是origin的get方法（我们只在获取property时用点操作符，其他时候仍然用方括号）。\n\n最后，整理一下思路，`MyRect`类中有一个`origin`属性，我们在它的实现中为它指定了实例变量`_origin`作为它的存储空间。然后我们重写了它的get\\set方法，在get方法中，我们采取惰性实例化，没有重写init方法在一开始就为实例变量开辟空间，而是直到我们不得不去获取它的值时，才进行初始化。接下来，在其他的方法中，我们一律用get方法获取`_origin`实例变量，它是实例变量的入口，不管我们想要获取它的值，还是改变它的值，都能够确保它开辟了一块内存空间用于存储，而且是在最后一刻万不得已时才初始化的，在不必要的时候没有浪费一丝内存。\n另一方面，对于int类型的width和height来说，则没有惰性实例化这一概念，因为它们是数字字符常量，处于常量区中，一直都持有着属于它们的内存空间。\n\n来看一下改造完的代码。\nMyRect类实现。\n```\n#import \"MyRect.h\"\n\n@implementation MyRect\n\n@synthesize origin = _origin;\n\n- (XYPoint *)origin {\n    if (!_origin) {\n        _origin = [[XYPoint alloc] init];\n    }\n    return _origin;\n}\n\n- (void)setOrigin:(XYPoint *)origin {\n    self.origin.x = origin.x;\n    self.origin.y = origin.y;\n}\n\n- (void)setWidth:(int)w andHeight:(int)h {\n    self.width = w;\n    self.height = h;\n}\n\n- (int)area {\n    return self.width * self.height;\n}\n\n- (int)perimeter {\n    return (self.width + self.height) * 2;\n}\n\n@end\n```\n\nmain函数\n```\n#import <Foundation/Foundation.h>\n#import \"MyRect.h\"\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyRect *rect = [[MyRect alloc] init];\n        XYPoint *point = [[XYPoint alloc] init];\n        \n        [point setX:100 andY:200];\n        \n        [rect setWidth:5 andHeight:8];\n        rect.origin = point;\n        \n        NSLog(@\"Rect w = %i, h = %i\", rect.width, rect.height);\n        NSLog(@\"Origin at (%i, %i)\", rect.origin.x, rect.origin.y);\n        \n        [point setX:50 andY:50];\n        NSLog(@\"Origin at (%i, %i)\", rect.origin.x, rect.origin.y);\n        NSLog(@\"Area = %i, Perimeter = %i\", [rect area], [rect perimeter]);\n    }\n    return 0;\n}\n```\n\n运行结果\n```\n2016-08-16 16:44:37.009 LKTestPracticeClass[40218:7027614] Rect w = 5, h = 8\n2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Origin at (100, 200)\n2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Origin at (100, 200)\n2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Area = 40, Perimeter = 26\nProgram ended with exit code: 0\n```","source":"_posts/Objective-C：类的属性和方法.md","raw":"---\ntitle: 'Objective-C：类的属性和方法'\ndate: 2016-08-16 15:36:56\ncategories: iOS\ntags:\n    - Objective-C\n    - 类\n    - 属性\n    - 方法\n    - 惰性实例化\n---\n我们知道iOS中的frame由x, y, width, height决定的一个个矩形。\n接下来尝试用一个矩形类来探究如何使用类中的属性和方法。\n<!-- more -->\n\n**坐标类XYPoint。**\n```\n#import <Foundation/Foundation.h>\n\n@interface XYPoint : NSObject\n\n@property int x, y;\n\n- (void)setX:(int)xVal andY:(int)yVal;\n\n@end\n```\n\n```\n#import \"XYPoint.h\"\n\n@implementation XYPoint\n\n-(void)setX:(int)xVal andY:(int)yVal {\n    _x = xVal;\n    _y = yVal;\n}\n\n@end\n```\n\n**矩形类MyRect**\n```\n#import <Foundation/Foundation.h>\n#import \"XYPoint.h\"\n\n@interface MyRect : NSObject\n\n@property (nonatomic) int width, height;\n@property (nonatomic) XYPoint *origin;\n\n- (void)setWidth:(int)w andHeight:(int)h;\n- (int)area;\n- (int)perimeter;\n\n@end\n```\n\n```\n#import \"MyRect.h\"\n\n@implementation MyRect\n\n- (XYPoint *)origin {\n    return _origin;\n}\n\n- (void)setOrigin:(XYPoint *)origin {\n    _origin = origin;\n}\n\n- (void)setWidth:(int)w andHeight:(int)h {\n    _width = w;\n    _height = h;\n}\n\n- (int)area {\n    return _width * _height;\n}\n\n- (int)perimeter {\n    return (_width + _height) * 2;\n}\n\n@end\n```\n\n**main函数**\n```\n#import <Foundation/Foundation.h>\n#import \"MyRect.h\"\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyRect *rect = [[MyRect alloc] init];\n        XYPoint *point = [[XYPoint alloc] init];\n        \n        [point setX:100 andY:200];\n        \n        [rect setWidth:5 andHeight:8];\n        rect.origin = point;\n        \n        NSLog(@\"Rect w = %i, h = %i\", rect.width, rect.height);\n        NSLog(@\"Origin at (%i, %i)\", rect.origin.x, rect.origin.y);\n        \n        [point setX:50 andY:50];\n        NSLog(@\"Origin at (%i, %i)\", rect.origin.x, rect.origin.y);\n//        NSLog(@\"Area = %i, Perimeter = %i\", [rect area], [rect perimeter]);\n    }\n    return 0;\n}\n```\n\nXYPoint类非常简单，x，y属性，加上其set方法。\nMyRect类中有width，height以及一个XYPoint属性，加上一些方法。\nmain函数中是我们编写的测试代码，做一些初始化，赋值，输出的操作。\n\n我们的重点在于MyRect类，这段代码是有问题的。\n首先看头文件，利用@property自动声明get\\set方法。\n再看实现文件，在get方法中报`Use of undeclared indentifier '_origin'`error。说好的在Xcode4.5以后可以省略@synthesize呢？现在我们删除get方法和set方法其中之一，发现error消失了。实际上编译器确实自动添加了@synthesize，默认的实例变量名为`\"_\" + 属性名`。但是当我们同时重写了get\\set方法时，系统就不再自动帮我生成实例变量了。\n\n现在我们加上`@synthesize origin = _origin;`。error彻底消失，我们也可以自由地重写get\\set方法了。\n运行main函数得到结果。\n```\n2016-08-16 15:59:45.763 LKTestPracticeClass[39983:6991728] Rect w = 5, h = 8\n2016-08-16 15:59:45.764 LKTestPracticeClass[39983:6991728] Origin at (100, 200)\n2016-08-16 15:59:45.764 LKTestPracticeClass[39983:6991728] Origin at (50, 50)\nProgram ended with exit code: 0\n```\n\n回到main函数，我们将point对象赋值给rect的属性origin，然后改变point对象的值，为什么rect的origin属性值也随之改变了呢？我们知道C语言中函数的参数都是值传递，那么来看MyRect类中origin的set方法，\n```\n- (void)setOrigin:(XYPoint *)origin {\n    _origin = origin;\n}\n```\norigin是(XYPoint *)类型，这是一个XYPoint类型对象的引用/地址，而`_origin = origin;`只是将这个对象的地址赋值给了实例变量`_origin`，现在，它们指向了同一个内存地址，那么我们改变了这个地址所指向的值，则point对象和rect对象的origin对象值都同时改变了。\n\n如何解决这个问题呢，这里有一个重点的思想，rect对象应该持有一个XYPoint类型的对象，这是它的横纵坐标，这个对象应该有它自己的内存空间，而不是指向一块与rect对象无关的内存。\n\n第一个方案，改造setOrigin方法。\n```\n- (void)setOrigin:(XYPoint *)origin {\n    if (!_origin) {\n        _origin = [[XYPoint alloc] init];\n    }\n    _origin.x = origin.x;\n    _origin.y = origin.y;\n}\n```\n当我们给origin set值时，实例化一块内存空间，然后将传递过来的point对象中x，y一一赋值给新的origin对象。\n运行结果：\n```\n2016-08-16 16:09:37.557 LKTestPracticeClass[40037:6999091] Rect w = 5, h = 8\n2016-08-16 16:09:37.558 LKTestPracticeClass[40037:6999091] Origin at (100, 200)\n2016-08-16 16:09:37.558 LKTestPracticeClass[40037:6999091] Origin at (100, 200)\nProgram ended with exit code: 0\n```\n\n很明显，这生效了，但是在set方法中实例化这让人难受，更舒服的做法是每当我获取origin属性的时候，再做实例化，因为我可能并不会重写set方法，或许我不止这一个set方法，总之set方法太“上游”了，我希望在更底层、更统一的地方做init操作。因此，我们把实例化的代码移动到get中，这也叫做惰性实例化。\n```\n- (XYPoint *)origin {\n    if (!_origin) {\n        _origin = [[XYPoint alloc] init];\n    }\n    return _origin;\n}\n\n- (void)setOrigin:(XYPoint *)origin {\n    _origin.x = origin.x;\n    _origin.y = origin.y;\n}\n```\n运行代码，期待...\n```\n2016-08-16 16:14:26.337 LKTestPracticeClass[40065:7002556] Rect w = 5, h = 8\n2016-08-16 16:14:26.338 LKTestPracticeClass[40065:7002556] Origin at (0, 0)\n2016-08-16 16:14:26.338 LKTestPracticeClass[40065:7002556] Origin at (0, 0)\nProgram ended with exit code: 0\n```\n然而结果是这样的，x，y的值从始至终都是0。\n\n我们检查一下main函数，原来我们从未调用过get方法，origin属性从未指向任何内存，也就是nil，而nil对象中值是从0开始的。那么，让我们在setOrigin之前调用一个get吧。\n```\nrect.origin;\nrect.origin = point;\n```\n运行，\n```\n2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Rect w = 5, h = 8\n2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Origin at (100, 200)\n2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Origin at (100, 200)\nProgram ended with exit code: 0\n```\n很棒，实现了我们的目的。\n\n可是这个get方法调用得莫名其妙，异常丑陋，让我们删掉它，再研究一下MyRect类。我们在set方法中调用一下get不就实现了我们的目的吗？\n于是...\n```\n@synthesize origin = _origin;\n\n- (XYPoint *)origin {\n    if (!_origin) {\n        _origin = [[XYPoint alloc] init];\n    }\n    return _origin;\n}\n\n- (void)setOrigin:(XYPoint *)origin {\n    self.origin.x = origin.x;\n    self.origin.y = origin.y;\n}\n```\n这里的self.origin就是origin的get方法（我们只在获取property时用点操作符，其他时候仍然用方括号）。\n\n最后，整理一下思路，`MyRect`类中有一个`origin`属性，我们在它的实现中为它指定了实例变量`_origin`作为它的存储空间。然后我们重写了它的get\\set方法，在get方法中，我们采取惰性实例化，没有重写init方法在一开始就为实例变量开辟空间，而是直到我们不得不去获取它的值时，才进行初始化。接下来，在其他的方法中，我们一律用get方法获取`_origin`实例变量，它是实例变量的入口，不管我们想要获取它的值，还是改变它的值，都能够确保它开辟了一块内存空间用于存储，而且是在最后一刻万不得已时才初始化的，在不必要的时候没有浪费一丝内存。\n另一方面，对于int类型的width和height来说，则没有惰性实例化这一概念，因为它们是数字字符常量，处于常量区中，一直都持有着属于它们的内存空间。\n\n来看一下改造完的代码。\nMyRect类实现。\n```\n#import \"MyRect.h\"\n\n@implementation MyRect\n\n@synthesize origin = _origin;\n\n- (XYPoint *)origin {\n    if (!_origin) {\n        _origin = [[XYPoint alloc] init];\n    }\n    return _origin;\n}\n\n- (void)setOrigin:(XYPoint *)origin {\n    self.origin.x = origin.x;\n    self.origin.y = origin.y;\n}\n\n- (void)setWidth:(int)w andHeight:(int)h {\n    self.width = w;\n    self.height = h;\n}\n\n- (int)area {\n    return self.width * self.height;\n}\n\n- (int)perimeter {\n    return (self.width + self.height) * 2;\n}\n\n@end\n```\n\nmain函数\n```\n#import <Foundation/Foundation.h>\n#import \"MyRect.h\"\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyRect *rect = [[MyRect alloc] init];\n        XYPoint *point = [[XYPoint alloc] init];\n        \n        [point setX:100 andY:200];\n        \n        [rect setWidth:5 andHeight:8];\n        rect.origin = point;\n        \n        NSLog(@\"Rect w = %i, h = %i\", rect.width, rect.height);\n        NSLog(@\"Origin at (%i, %i)\", rect.origin.x, rect.origin.y);\n        \n        [point setX:50 andY:50];\n        NSLog(@\"Origin at (%i, %i)\", rect.origin.x, rect.origin.y);\n        NSLog(@\"Area = %i, Perimeter = %i\", [rect area], [rect perimeter]);\n    }\n    return 0;\n}\n```\n\n运行结果\n```\n2016-08-16 16:44:37.009 LKTestPracticeClass[40218:7027614] Rect w = 5, h = 8\n2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Origin at (100, 200)\n2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Origin at (100, 200)\n2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Area = 40, Perimeter = 26\nProgram ended with exit code: 0\n```","slug":"Objective-C：类的属性和方法","published":1,"updated":"2016-08-31T05:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisig8xnj0001zpk5r7t201nr","content":"<p>我们知道iOS中的frame由x, y, width, height决定的一个个矩形。<br>接下来尝试用一个矩形类来探究如何使用类中的属性和方法。<br><a id=\"more\"></a></p>\n<p><strong>坐标类XYPoint。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface XYPoint : NSObject</div><div class=\"line\"></div><div class=\"line\">@property int x, y;</div><div class=\"line\"></div><div class=\"line\">- (void)setX:(int)xVal andY:(int)yVal;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;XYPoint.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation XYPoint</div><div class=\"line\"></div><div class=\"line\">-(void)setX:(int)xVal andY:(int)yVal &#123;</div><div class=\"line\">    _x = xVal;</div><div class=\"line\">    _y = yVal;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p><strong>矩形类MyRect</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &quot;XYPoint.h&quot;</div><div class=\"line\"></div><div class=\"line\">@interface MyRect : NSObject</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic) int width, height;</div><div class=\"line\">@property (nonatomic) XYPoint *origin;</div><div class=\"line\"></div><div class=\"line\">- (void)setWidth:(int)w andHeight:(int)h;</div><div class=\"line\">- (int)area;</div><div class=\"line\">- (int)perimeter;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;MyRect.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation MyRect</div><div class=\"line\"></div><div class=\"line\">- (XYPoint *)origin &#123;</div><div class=\"line\">    return _origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    _origin = origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setWidth:(int)w andHeight:(int)h &#123;</div><div class=\"line\">    _width = w;</div><div class=\"line\">    _height = h;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (int)area &#123;</div><div class=\"line\">    return _width * _height;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (int)perimeter &#123;</div><div class=\"line\">    return (_width + _height) * 2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p><strong>main函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &quot;MyRect.h&quot;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        MyRect *rect = [[MyRect alloc] init];</div><div class=\"line\">        XYPoint *point = [[XYPoint alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [point setX:100 andY:200];</div><div class=\"line\">        </div><div class=\"line\">        [rect setWidth:5 andHeight:8];</div><div class=\"line\">        rect.origin = point;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@&quot;Rect w = %i, h = %i&quot;, rect.width, rect.height);</div><div class=\"line\">        NSLog(@&quot;Origin at (%i, %i)&quot;, rect.origin.x, rect.origin.y);</div><div class=\"line\">        </div><div class=\"line\">        [point setX:50 andY:50];</div><div class=\"line\">        NSLog(@&quot;Origin at (%i, %i)&quot;, rect.origin.x, rect.origin.y);</div><div class=\"line\">//        NSLog(@&quot;Area = %i, Perimeter = %i&quot;, [rect area], [rect perimeter]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>XYPoint类非常简单，x，y属性，加上其set方法。<br>MyRect类中有width，height以及一个XYPoint属性，加上一些方法。<br>main函数中是我们编写的测试代码，做一些初始化，赋值，输出的操作。</p>\n<p>我们的重点在于MyRect类，这段代码是有问题的。<br>首先看头文件，利用@property自动声明get\\set方法。<br>再看实现文件，在get方法中报<code>Use of undeclared indentifier &#39;_origin&#39;</code>error。说好的在Xcode4.5以后可以省略@synthesize呢？现在我们删除get方法和set方法其中之一，发现error消失了。实际上编译器确实自动添加了@synthesize，默认的实例变量名为<code>&quot;_&quot; + 属性名</code>。但是当我们同时重写了get\\set方法时，系统就不再自动帮我生成实例变量了。</p>\n<p>现在我们加上<code>@synthesize origin = _origin;</code>。error彻底消失，我们也可以自由地重写get\\set方法了。<br>运行main函数得到结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 15:59:45.763 LKTestPracticeClass[39983:6991728] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 15:59:45.764 LKTestPracticeClass[39983:6991728] Origin at (100, 200)</div><div class=\"line\">2016-08-16 15:59:45.764 LKTestPracticeClass[39983:6991728] Origin at (50, 50)</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>\n<p>回到main函数，我们将point对象赋值给rect的属性origin，然后改变point对象的值，为什么rect的origin属性值也随之改变了呢？我们知道C语言中函数的参数都是值传递，那么来看MyRect类中origin的set方法，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    _origin = origin;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>origin是(XYPoint *)类型，这是一个XYPoint类型对象的引用/地址，而<code>_origin = origin;</code>只是将这个对象的地址赋值给了实例变量<code>_origin</code>，现在，它们指向了同一个内存地址，那么我们改变了这个地址所指向的值，则point对象和rect对象的origin对象值都同时改变了。</p>\n<p>如何解决这个问题呢，这里有一个重点的思想，rect对象应该持有一个XYPoint类型的对象，这是它的横纵坐标，这个对象应该有它自己的内存空间，而不是指向一块与rect对象无关的内存。</p>\n<p>第一个方案，改造setOrigin方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    if (!_origin) &#123;</div><div class=\"line\">        _origin = [[XYPoint alloc] init];</div><div class=\"line\">    &#125;</div><div class=\"line\">    _origin.x = origin.x;</div><div class=\"line\">    _origin.y = origin.y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当我们给origin set值时，实例化一块内存空间，然后将传递过来的point对象中x，y一一赋值给新的origin对象。<br>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 16:09:37.557 LKTestPracticeClass[40037:6999091] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 16:09:37.558 LKTestPracticeClass[40037:6999091] Origin at (100, 200)</div><div class=\"line\">2016-08-16 16:09:37.558 LKTestPracticeClass[40037:6999091] Origin at (100, 200)</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>\n<p>很明显，这生效了，但是在set方法中实例化这让人难受，更舒服的做法是每当我获取origin属性的时候，再做实例化，因为我可能并不会重写set方法，或许我不止这一个set方法，总之set方法太“上游”了，我希望在更底层、更统一的地方做init操作。因此，我们把实例化的代码移动到get中，这也叫做惰性实例化。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (XYPoint *)origin &#123;</div><div class=\"line\">    if (!_origin) &#123;</div><div class=\"line\">        _origin = [[XYPoint alloc] init];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return _origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    _origin.x = origin.x;</div><div class=\"line\">    _origin.y = origin.y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行代码，期待…<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 16:14:26.337 LKTestPracticeClass[40065:7002556] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 16:14:26.338 LKTestPracticeClass[40065:7002556] Origin at (0, 0)</div><div class=\"line\">2016-08-16 16:14:26.338 LKTestPracticeClass[40065:7002556] Origin at (0, 0)</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>\n<p>然而结果是这样的，x，y的值从始至终都是0。</p>\n<p>我们检查一下main函数，原来我们从未调用过get方法，origin属性从未指向任何内存，也就是nil，而nil对象中值是从0开始的。那么，让我们在setOrigin之前调用一个get吧。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rect.origin;</div><div class=\"line\">rect.origin = point;</div></pre></td></tr></table></figure></p>\n<p>运行，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Origin at (100, 200)</div><div class=\"line\">2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Origin at (100, 200)</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>\n<p>很棒，实现了我们的目的。</p>\n<p>可是这个get方法调用得莫名其妙，异常丑陋，让我们删掉它，再研究一下MyRect类。我们在set方法中调用一下get不就实现了我们的目的吗？<br>于是…<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@synthesize origin = _origin;</div><div class=\"line\"></div><div class=\"line\">- (XYPoint *)origin &#123;</div><div class=\"line\">    if (!_origin) &#123;</div><div class=\"line\">        _origin = [[XYPoint alloc] init];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return _origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    self.origin.x = origin.x;</div><div class=\"line\">    self.origin.y = origin.y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里的self.origin就是origin的get方法（我们只在获取property时用点操作符，其他时候仍然用方括号）。</p>\n<p>最后，整理一下思路，<code>MyRect</code>类中有一个<code>origin</code>属性，我们在它的实现中为它指定了实例变量<code>_origin</code>作为它的存储空间。然后我们重写了它的get\\set方法，在get方法中，我们采取惰性实例化，没有重写init方法在一开始就为实例变量开辟空间，而是直到我们不得不去获取它的值时，才进行初始化。接下来，在其他的方法中，我们一律用get方法获取<code>_origin</code>实例变量，它是实例变量的入口，不管我们想要获取它的值，还是改变它的值，都能够确保它开辟了一块内存空间用于存储，而且是在最后一刻万不得已时才初始化的，在不必要的时候没有浪费一丝内存。<br>另一方面，对于int类型的width和height来说，则没有惰性实例化这一概念，因为它们是数字字符常量，处于常量区中，一直都持有着属于它们的内存空间。</p>\n<p>来看一下改造完的代码。<br>MyRect类实现。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;MyRect.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation MyRect</div><div class=\"line\"></div><div class=\"line\">@synthesize origin = _origin;</div><div class=\"line\"></div><div class=\"line\">- (XYPoint *)origin &#123;</div><div class=\"line\">    if (!_origin) &#123;</div><div class=\"line\">        _origin = [[XYPoint alloc] init];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return _origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    self.origin.x = origin.x;</div><div class=\"line\">    self.origin.y = origin.y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setWidth:(int)w andHeight:(int)h &#123;</div><div class=\"line\">    self.width = w;</div><div class=\"line\">    self.height = h;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (int)area &#123;</div><div class=\"line\">    return self.width * self.height;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (int)perimeter &#123;</div><div class=\"line\">    return (self.width + self.height) * 2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p>main函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &quot;MyRect.h&quot;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        MyRect *rect = [[MyRect alloc] init];</div><div class=\"line\">        XYPoint *point = [[XYPoint alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [point setX:100 andY:200];</div><div class=\"line\">        </div><div class=\"line\">        [rect setWidth:5 andHeight:8];</div><div class=\"line\">        rect.origin = point;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@&quot;Rect w = %i, h = %i&quot;, rect.width, rect.height);</div><div class=\"line\">        NSLog(@&quot;Origin at (%i, %i)&quot;, rect.origin.x, rect.origin.y);</div><div class=\"line\">        </div><div class=\"line\">        [point setX:50 andY:50];</div><div class=\"line\">        NSLog(@&quot;Origin at (%i, %i)&quot;, rect.origin.x, rect.origin.y);</div><div class=\"line\">        NSLog(@&quot;Area = %i, Perimeter = %i&quot;, [rect area], [rect perimeter]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 16:44:37.009 LKTestPracticeClass[40218:7027614] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Origin at (100, 200)</div><div class=\"line\">2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Origin at (100, 200)</div><div class=\"line\">2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Area = 40, Perimeter = 26</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>我们知道iOS中的frame由x, y, width, height决定的一个个矩形。<br>接下来尝试用一个矩形类来探究如何使用类中的属性和方法。<br>","more":"</p>\n<p><strong>坐标类XYPoint。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface XYPoint : NSObject</div><div class=\"line\"></div><div class=\"line\">@property int x, y;</div><div class=\"line\"></div><div class=\"line\">- (void)setX:(int)xVal andY:(int)yVal;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;XYPoint.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation XYPoint</div><div class=\"line\"></div><div class=\"line\">-(void)setX:(int)xVal andY:(int)yVal &#123;</div><div class=\"line\">    _x = xVal;</div><div class=\"line\">    _y = yVal;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p><strong>矩形类MyRect</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &quot;XYPoint.h&quot;</div><div class=\"line\"></div><div class=\"line\">@interface MyRect : NSObject</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic) int width, height;</div><div class=\"line\">@property (nonatomic) XYPoint *origin;</div><div class=\"line\"></div><div class=\"line\">- (void)setWidth:(int)w andHeight:(int)h;</div><div class=\"line\">- (int)area;</div><div class=\"line\">- (int)perimeter;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;MyRect.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation MyRect</div><div class=\"line\"></div><div class=\"line\">- (XYPoint *)origin &#123;</div><div class=\"line\">    return _origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    _origin = origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setWidth:(int)w andHeight:(int)h &#123;</div><div class=\"line\">    _width = w;</div><div class=\"line\">    _height = h;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (int)area &#123;</div><div class=\"line\">    return _width * _height;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (int)perimeter &#123;</div><div class=\"line\">    return (_width + _height) * 2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p><strong>main函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &quot;MyRect.h&quot;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        MyRect *rect = [[MyRect alloc] init];</div><div class=\"line\">        XYPoint *point = [[XYPoint alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [point setX:100 andY:200];</div><div class=\"line\">        </div><div class=\"line\">        [rect setWidth:5 andHeight:8];</div><div class=\"line\">        rect.origin = point;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@&quot;Rect w = %i, h = %i&quot;, rect.width, rect.height);</div><div class=\"line\">        NSLog(@&quot;Origin at (%i, %i)&quot;, rect.origin.x, rect.origin.y);</div><div class=\"line\">        </div><div class=\"line\">        [point setX:50 andY:50];</div><div class=\"line\">        NSLog(@&quot;Origin at (%i, %i)&quot;, rect.origin.x, rect.origin.y);</div><div class=\"line\">//        NSLog(@&quot;Area = %i, Perimeter = %i&quot;, [rect area], [rect perimeter]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>XYPoint类非常简单，x，y属性，加上其set方法。<br>MyRect类中有width，height以及一个XYPoint属性，加上一些方法。<br>main函数中是我们编写的测试代码，做一些初始化，赋值，输出的操作。</p>\n<p>我们的重点在于MyRect类，这段代码是有问题的。<br>首先看头文件，利用@property自动声明get\\set方法。<br>再看实现文件，在get方法中报<code>Use of undeclared indentifier &#39;_origin&#39;</code>error。说好的在Xcode4.5以后可以省略@synthesize呢？现在我们删除get方法和set方法其中之一，发现error消失了。实际上编译器确实自动添加了@synthesize，默认的实例变量名为<code>&quot;_&quot; + 属性名</code>。但是当我们同时重写了get\\set方法时，系统就不再自动帮我生成实例变量了。</p>\n<p>现在我们加上<code>@synthesize origin = _origin;</code>。error彻底消失，我们也可以自由地重写get\\set方法了。<br>运行main函数得到结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 15:59:45.763 LKTestPracticeClass[39983:6991728] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 15:59:45.764 LKTestPracticeClass[39983:6991728] Origin at (100, 200)</div><div class=\"line\">2016-08-16 15:59:45.764 LKTestPracticeClass[39983:6991728] Origin at (50, 50)</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>\n<p>回到main函数，我们将point对象赋值给rect的属性origin，然后改变point对象的值，为什么rect的origin属性值也随之改变了呢？我们知道C语言中函数的参数都是值传递，那么来看MyRect类中origin的set方法，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    _origin = origin;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>origin是(XYPoint *)类型，这是一个XYPoint类型对象的引用/地址，而<code>_origin = origin;</code>只是将这个对象的地址赋值给了实例变量<code>_origin</code>，现在，它们指向了同一个内存地址，那么我们改变了这个地址所指向的值，则point对象和rect对象的origin对象值都同时改变了。</p>\n<p>如何解决这个问题呢，这里有一个重点的思想，rect对象应该持有一个XYPoint类型的对象，这是它的横纵坐标，这个对象应该有它自己的内存空间，而不是指向一块与rect对象无关的内存。</p>\n<p>第一个方案，改造setOrigin方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    if (!_origin) &#123;</div><div class=\"line\">        _origin = [[XYPoint alloc] init];</div><div class=\"line\">    &#125;</div><div class=\"line\">    _origin.x = origin.x;</div><div class=\"line\">    _origin.y = origin.y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当我们给origin set值时，实例化一块内存空间，然后将传递过来的point对象中x，y一一赋值给新的origin对象。<br>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 16:09:37.557 LKTestPracticeClass[40037:6999091] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 16:09:37.558 LKTestPracticeClass[40037:6999091] Origin at (100, 200)</div><div class=\"line\">2016-08-16 16:09:37.558 LKTestPracticeClass[40037:6999091] Origin at (100, 200)</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>\n<p>很明显，这生效了，但是在set方法中实例化这让人难受，更舒服的做法是每当我获取origin属性的时候，再做实例化，因为我可能并不会重写set方法，或许我不止这一个set方法，总之set方法太“上游”了，我希望在更底层、更统一的地方做init操作。因此，我们把实例化的代码移动到get中，这也叫做惰性实例化。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (XYPoint *)origin &#123;</div><div class=\"line\">    if (!_origin) &#123;</div><div class=\"line\">        _origin = [[XYPoint alloc] init];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return _origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    _origin.x = origin.x;</div><div class=\"line\">    _origin.y = origin.y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行代码，期待…<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 16:14:26.337 LKTestPracticeClass[40065:7002556] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 16:14:26.338 LKTestPracticeClass[40065:7002556] Origin at (0, 0)</div><div class=\"line\">2016-08-16 16:14:26.338 LKTestPracticeClass[40065:7002556] Origin at (0, 0)</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>\n<p>然而结果是这样的，x，y的值从始至终都是0。</p>\n<p>我们检查一下main函数，原来我们从未调用过get方法，origin属性从未指向任何内存，也就是nil，而nil对象中值是从0开始的。那么，让我们在setOrigin之前调用一个get吧。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rect.origin;</div><div class=\"line\">rect.origin = point;</div></pre></td></tr></table></figure></p>\n<p>运行，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Origin at (100, 200)</div><div class=\"line\">2016-08-16 16:17:18.664 LKTestPracticeClass[40097:7005323] Origin at (100, 200)</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>\n<p>很棒，实现了我们的目的。</p>\n<p>可是这个get方法调用得莫名其妙，异常丑陋，让我们删掉它，再研究一下MyRect类。我们在set方法中调用一下get不就实现了我们的目的吗？<br>于是…<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@synthesize origin = _origin;</div><div class=\"line\"></div><div class=\"line\">- (XYPoint *)origin &#123;</div><div class=\"line\">    if (!_origin) &#123;</div><div class=\"line\">        _origin = [[XYPoint alloc] init];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return _origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    self.origin.x = origin.x;</div><div class=\"line\">    self.origin.y = origin.y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里的self.origin就是origin的get方法（我们只在获取property时用点操作符，其他时候仍然用方括号）。</p>\n<p>最后，整理一下思路，<code>MyRect</code>类中有一个<code>origin</code>属性，我们在它的实现中为它指定了实例变量<code>_origin</code>作为它的存储空间。然后我们重写了它的get\\set方法，在get方法中，我们采取惰性实例化，没有重写init方法在一开始就为实例变量开辟空间，而是直到我们不得不去获取它的值时，才进行初始化。接下来，在其他的方法中，我们一律用get方法获取<code>_origin</code>实例变量，它是实例变量的入口，不管我们想要获取它的值，还是改变它的值，都能够确保它开辟了一块内存空间用于存储，而且是在最后一刻万不得已时才初始化的，在不必要的时候没有浪费一丝内存。<br>另一方面，对于int类型的width和height来说，则没有惰性实例化这一概念，因为它们是数字字符常量，处于常量区中，一直都持有着属于它们的内存空间。</p>\n<p>来看一下改造完的代码。<br>MyRect类实现。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;MyRect.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation MyRect</div><div class=\"line\"></div><div class=\"line\">@synthesize origin = _origin;</div><div class=\"line\"></div><div class=\"line\">- (XYPoint *)origin &#123;</div><div class=\"line\">    if (!_origin) &#123;</div><div class=\"line\">        _origin = [[XYPoint alloc] init];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return _origin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setOrigin:(XYPoint *)origin &#123;</div><div class=\"line\">    self.origin.x = origin.x;</div><div class=\"line\">    self.origin.y = origin.y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setWidth:(int)w andHeight:(int)h &#123;</div><div class=\"line\">    self.width = w;</div><div class=\"line\">    self.height = h;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (int)area &#123;</div><div class=\"line\">    return self.width * self.height;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (int)perimeter &#123;</div><div class=\"line\">    return (self.width + self.height) * 2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p>main函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &quot;MyRect.h&quot;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        MyRect *rect = [[MyRect alloc] init];</div><div class=\"line\">        XYPoint *point = [[XYPoint alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [point setX:100 andY:200];</div><div class=\"line\">        </div><div class=\"line\">        [rect setWidth:5 andHeight:8];</div><div class=\"line\">        rect.origin = point;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@&quot;Rect w = %i, h = %i&quot;, rect.width, rect.height);</div><div class=\"line\">        NSLog(@&quot;Origin at (%i, %i)&quot;, rect.origin.x, rect.origin.y);</div><div class=\"line\">        </div><div class=\"line\">        [point setX:50 andY:50];</div><div class=\"line\">        NSLog(@&quot;Origin at (%i, %i)&quot;, rect.origin.x, rect.origin.y);</div><div class=\"line\">        NSLog(@&quot;Area = %i, Perimeter = %i&quot;, [rect area], [rect perimeter]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-16 16:44:37.009 LKTestPracticeClass[40218:7027614] Rect w = 5, h = 8</div><div class=\"line\">2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Origin at (100, 200)</div><div class=\"line\">2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Origin at (100, 200)</div><div class=\"line\">2016-08-16 16:44:37.010 LKTestPracticeClass[40218:7027614] Area = 40, Perimeter = 26</div><div class=\"line\">Program ended with exit code: 0</div></pre></td></tr></table></figure></p>"},{"title":"iOS学习计划","date":"2016-08-10T10:42:22.000Z","_content":"\n经过两次面试更加清楚地认识到，面试“绝对”没有运气的成分，所有结果都是平时积累的爆发。\n做的项目也算是不少，Java，Web，iOS均有实际项目开发上线经验，为什么面试如此失败呢？\n反省自身，开发时只求结果只求进度，却没有去深究原理，虽则有良好的编程习惯，项目表面上良好地运行，终究也只不过是码农而已，离工程师相去甚远。\n\n**Stay hungry. Stay foolish.**\n<!-- more -->\n\n制定一个学习和复习的计划，目的是重新扎实基础，了解“正确开发”的本质和原因，督促自己阅读源码，耐心动手实践。\n\n## 罗列计划要看的书(划去的书已通读一遍)：\n\n**程序设计基础**\n数据结构与算法分析：C语言描述+中文版\n傅清祥算法与数据结构\n计算机程序设计艺术（这个只能涉猎）\n编程珠玑\n编程之美\n设计模式之禅（第2版）\n人月神话\n重构_改善既有代码的设计\n\n**iOS**\n~~iOS开发指南~~\nObjective-C程序设计  第6版\n精通iOS开发\niOS开发进阶\nObjective-C基础教程高清中文版（第2版）\nObjective-C编程之道：IOS设计模式解析\nObjective-C高级编程 iOS与OS X多线程和内存管理\nEffective Objective-C 2.0  编写高质量iOS与OS X代码的52个有效方法\n\n## 罗列必须要看的API：\n[Apple Open Source](http://opensource.apple.com)\n[API Reference](https://developer.apple.com/reference/)\n[Guides and Sample Code](https://developer.apple.com/library/prerelease/content/navigation/)\n[Swift开源](https://swift.org/download/#using-downloads)\n\n## 罗列有价值的教程：\n[斯坦福公开课：iOS 7应用开发](http://open.163.com/movie/2014/1/M/7/M9H7S9F1H_M9H7TMJM7.html)\n\n## 罗列有价值的Blog：\n[@唐巧](http://blog.devtang.com)\n[@sunnyxx](http://blog.sunnyxx.com)\n[@ibireme](http://blog.ibireme.com)\n\n## 罗列必须要研究到清楚明白的知识点：\n### **基础 － 对象**\n\n### **基础 － 类**\n\n### **基础 － 方法**\n\n### 内存 － 堆\n\n### 内存 － 栈\n\n### 内存 － 指针\n\n### 内存 － 进程\n\n### 内存 － 线程\n\n### 内存 － MRC\n\n### 内存 － ARC\n\n### **多线程 － GCD**\n\n### 多线程 － NSOperationQueue\n\n### 多线程 － 锁\n\n### RunLoop\n\n### Runtime & isa\n\n### block\n\n### Delegate\n\n### 设计模式 － 单例\n\n### 设计模式 － 代理\n\n### 设计模式 － 观察者\n\n### 架构 － MVC\n\n### JSON解析\n\n### 网络 － NSURLConnection\n\n### 网络 － AFNetworking\n\n### 网络 － SDWebImage\n\n### UI － UIResponder\n\n### UI － UIView\n\n### UI － UIControl\n\n### UI － ScrollView\n\n### UI － TableView\n\n### UI － CollectionView\n\n### UI － 自定义视图\n\n### UI － CALayer\n\n### UI － CAAnimation\n\n","source":"_posts/iOS学习计划.md","raw":"---\ntitle: iOS学习计划\ndate: 2016-08-10 18:42:22\ncategories: iOS\ntags:\n---\n\n经过两次面试更加清楚地认识到，面试“绝对”没有运气的成分，所有结果都是平时积累的爆发。\n做的项目也算是不少，Java，Web，iOS均有实际项目开发上线经验，为什么面试如此失败呢？\n反省自身，开发时只求结果只求进度，却没有去深究原理，虽则有良好的编程习惯，项目表面上良好地运行，终究也只不过是码农而已，离工程师相去甚远。\n\n**Stay hungry. Stay foolish.**\n<!-- more -->\n\n制定一个学习和复习的计划，目的是重新扎实基础，了解“正确开发”的本质和原因，督促自己阅读源码，耐心动手实践。\n\n## 罗列计划要看的书(划去的书已通读一遍)：\n\n**程序设计基础**\n数据结构与算法分析：C语言描述+中文版\n傅清祥算法与数据结构\n计算机程序设计艺术（这个只能涉猎）\n编程珠玑\n编程之美\n设计模式之禅（第2版）\n人月神话\n重构_改善既有代码的设计\n\n**iOS**\n~~iOS开发指南~~\nObjective-C程序设计  第6版\n精通iOS开发\niOS开发进阶\nObjective-C基础教程高清中文版（第2版）\nObjective-C编程之道：IOS设计模式解析\nObjective-C高级编程 iOS与OS X多线程和内存管理\nEffective Objective-C 2.0  编写高质量iOS与OS X代码的52个有效方法\n\n## 罗列必须要看的API：\n[Apple Open Source](http://opensource.apple.com)\n[API Reference](https://developer.apple.com/reference/)\n[Guides and Sample Code](https://developer.apple.com/library/prerelease/content/navigation/)\n[Swift开源](https://swift.org/download/#using-downloads)\n\n## 罗列有价值的教程：\n[斯坦福公开课：iOS 7应用开发](http://open.163.com/movie/2014/1/M/7/M9H7S9F1H_M9H7TMJM7.html)\n\n## 罗列有价值的Blog：\n[@唐巧](http://blog.devtang.com)\n[@sunnyxx](http://blog.sunnyxx.com)\n[@ibireme](http://blog.ibireme.com)\n\n## 罗列必须要研究到清楚明白的知识点：\n### **基础 － 对象**\n\n### **基础 － 类**\n\n### **基础 － 方法**\n\n### 内存 － 堆\n\n### 内存 － 栈\n\n### 内存 － 指针\n\n### 内存 － 进程\n\n### 内存 － 线程\n\n### 内存 － MRC\n\n### 内存 － ARC\n\n### **多线程 － GCD**\n\n### 多线程 － NSOperationQueue\n\n### 多线程 － 锁\n\n### RunLoop\n\n### Runtime & isa\n\n### block\n\n### Delegate\n\n### 设计模式 － 单例\n\n### 设计模式 － 代理\n\n### 设计模式 － 观察者\n\n### 架构 － MVC\n\n### JSON解析\n\n### 网络 － NSURLConnection\n\n### 网络 － AFNetworking\n\n### 网络 － SDWebImage\n\n### UI － UIResponder\n\n### UI － UIView\n\n### UI － UIControl\n\n### UI － ScrollView\n\n### UI － TableView\n\n### UI － CollectionView\n\n### UI － 自定义视图\n\n### UI － CALayer\n\n### UI － CAAnimation\n\n","slug":"iOS学习计划","published":1,"updated":"2016-08-16T09:16:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisig8xnq0004zpk5beqyb91a","content":"<p>经过两次面试更加清楚地认识到，面试“绝对”没有运气的成分，所有结果都是平时积累的爆发。<br>做的项目也算是不少，Java，Web，iOS均有实际项目开发上线经验，为什么面试如此失败呢？<br>反省自身，开发时只求结果只求进度，却没有去深究原理，虽则有良好的编程习惯，项目表面上良好地运行，终究也只不过是码农而已，离工程师相去甚远。</p>\n<p><strong>Stay hungry. Stay foolish.</strong><br><a id=\"more\"></a></p>\n<p>制定一个学习和复习的计划，目的是重新扎实基础，了解“正确开发”的本质和原因，督促自己阅读源码，耐心动手实践。</p>\n<h2 id=\"罗列计划要看的书-划去的书已通读一遍-：\"><a href=\"#罗列计划要看的书-划去的书已通读一遍-：\" class=\"headerlink\" title=\"罗列计划要看的书(划去的书已通读一遍)：\"></a>罗列计划要看的书(划去的书已通读一遍)：</h2><p><strong>程序设计基础</strong><br>数据结构与算法分析：C语言描述+中文版<br>傅清祥算法与数据结构<br>计算机程序设计艺术（这个只能涉猎）<br>编程珠玑<br>编程之美<br>设计模式之禅（第2版）<br>人月神话<br>重构_改善既有代码的设计</p>\n<p><strong>iOS</strong><br><del>iOS开发指南</del><br>Objective-C程序设计  第6版<br>精通iOS开发<br>iOS开发进阶<br>Objective-C基础教程高清中文版（第2版）<br>Objective-C编程之道：IOS设计模式解析<br>Objective-C高级编程 iOS与OS X多线程和内存管理<br>Effective Objective-C 2.0  编写高质量iOS与OS X代码的52个有效方法</p>\n<h2 id=\"罗列必须要看的API：\"><a href=\"#罗列必须要看的API：\" class=\"headerlink\" title=\"罗列必须要看的API：\"></a>罗列必须要看的API：</h2><p><a href=\"http://opensource.apple.com\" target=\"_blank\" rel=\"external\">Apple Open Source</a><br><a href=\"https://developer.apple.com/reference/\" target=\"_blank\" rel=\"external\">API Reference</a><br><a href=\"https://developer.apple.com/library/prerelease/content/navigation/\" target=\"_blank\" rel=\"external\">Guides and Sample Code</a><br><a href=\"https://swift.org/download/#using-downloads\" target=\"_blank\" rel=\"external\">Swift开源</a></p>\n<h2 id=\"罗列有价值的教程：\"><a href=\"#罗列有价值的教程：\" class=\"headerlink\" title=\"罗列有价值的教程：\"></a>罗列有价值的教程：</h2><p><a href=\"http://open.163.com/movie/2014/1/M/7/M9H7S9F1H_M9H7TMJM7.html\" target=\"_blank\" rel=\"external\">斯坦福公开课：iOS 7应用开发</a></p>\n<h2 id=\"罗列有价值的Blog：\"><a href=\"#罗列有价值的Blog：\" class=\"headerlink\" title=\"罗列有价值的Blog：\"></a>罗列有价值的Blog：</h2><p><a href=\"http://blog.devtang.com\" target=\"_blank\" rel=\"external\">@唐巧</a><br><a href=\"http://blog.sunnyxx.com\" target=\"_blank\" rel=\"external\">@sunnyxx</a><br><a href=\"http://blog.ibireme.com\" target=\"_blank\" rel=\"external\">@ibireme</a></p>\n<h2 id=\"罗列必须要研究到清楚明白的知识点：\"><a href=\"#罗列必须要研究到清楚明白的知识点：\" class=\"headerlink\" title=\"罗列必须要研究到清楚明白的知识点：\"></a>罗列必须要研究到清楚明白的知识点：</h2><h3 id=\"基础-－-对象\"><a href=\"#基础-－-对象\" class=\"headerlink\" title=\"基础 － 对象\"></a><strong>基础 － 对象</strong></h3><h3 id=\"基础-－-类\"><a href=\"#基础-－-类\" class=\"headerlink\" title=\"基础 － 类\"></a><strong>基础 － 类</strong></h3><h3 id=\"基础-－-方法\"><a href=\"#基础-－-方法\" class=\"headerlink\" title=\"基础 － 方法\"></a><strong>基础 － 方法</strong></h3><h3 id=\"内存-－-堆\"><a href=\"#内存-－-堆\" class=\"headerlink\" title=\"内存 － 堆\"></a>内存 － 堆</h3><h3 id=\"内存-－-栈\"><a href=\"#内存-－-栈\" class=\"headerlink\" title=\"内存 － 栈\"></a>内存 － 栈</h3><h3 id=\"内存-－-指针\"><a href=\"#内存-－-指针\" class=\"headerlink\" title=\"内存 － 指针\"></a>内存 － 指针</h3><h3 id=\"内存-－-进程\"><a href=\"#内存-－-进程\" class=\"headerlink\" title=\"内存 － 进程\"></a>内存 － 进程</h3><h3 id=\"内存-－-线程\"><a href=\"#内存-－-线程\" class=\"headerlink\" title=\"内存 － 线程\"></a>内存 － 线程</h3><h3 id=\"内存-－-MRC\"><a href=\"#内存-－-MRC\" class=\"headerlink\" title=\"内存 － MRC\"></a>内存 － MRC</h3><h3 id=\"内存-－-ARC\"><a href=\"#内存-－-ARC\" class=\"headerlink\" title=\"内存 － ARC\"></a>内存 － ARC</h3><h3 id=\"多线程-－-GCD\"><a href=\"#多线程-－-GCD\" class=\"headerlink\" title=\"多线程 － GCD\"></a><strong>多线程 － GCD</strong></h3><h3 id=\"多线程-－-NSOperationQueue\"><a href=\"#多线程-－-NSOperationQueue\" class=\"headerlink\" title=\"多线程 － NSOperationQueue\"></a>多线程 － NSOperationQueue</h3><h3 id=\"多线程-－-锁\"><a href=\"#多线程-－-锁\" class=\"headerlink\" title=\"多线程 － 锁\"></a>多线程 － 锁</h3><h3 id=\"RunLoop\"><a href=\"#RunLoop\" class=\"headerlink\" title=\"RunLoop\"></a>RunLoop</h3><h3 id=\"Runtime-amp-isa\"><a href=\"#Runtime-amp-isa\" class=\"headerlink\" title=\"Runtime &amp; isa\"></a>Runtime &amp; isa</h3><h3 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h3><h3 id=\"Delegate\"><a href=\"#Delegate\" class=\"headerlink\" title=\"Delegate\"></a>Delegate</h3><h3 id=\"设计模式-－-单例\"><a href=\"#设计模式-－-单例\" class=\"headerlink\" title=\"设计模式 － 单例\"></a>设计模式 － 单例</h3><h3 id=\"设计模式-－-代理\"><a href=\"#设计模式-－-代理\" class=\"headerlink\" title=\"设计模式 － 代理\"></a>设计模式 － 代理</h3><h3 id=\"设计模式-－-观察者\"><a href=\"#设计模式-－-观察者\" class=\"headerlink\" title=\"设计模式 － 观察者\"></a>设计模式 － 观察者</h3><h3 id=\"架构-－-MVC\"><a href=\"#架构-－-MVC\" class=\"headerlink\" title=\"架构 － MVC\"></a>架构 － MVC</h3><h3 id=\"JSON解析\"><a href=\"#JSON解析\" class=\"headerlink\" title=\"JSON解析\"></a>JSON解析</h3><h3 id=\"网络-－-NSURLConnection\"><a href=\"#网络-－-NSURLConnection\" class=\"headerlink\" title=\"网络 － NSURLConnection\"></a>网络 － NSURLConnection</h3><h3 id=\"网络-－-AFNetworking\"><a href=\"#网络-－-AFNetworking\" class=\"headerlink\" title=\"网络 － AFNetworking\"></a>网络 － AFNetworking</h3><h3 id=\"网络-－-SDWebImage\"><a href=\"#网络-－-SDWebImage\" class=\"headerlink\" title=\"网络 － SDWebImage\"></a>网络 － SDWebImage</h3><h3 id=\"UI-－-UIResponder\"><a href=\"#UI-－-UIResponder\" class=\"headerlink\" title=\"UI － UIResponder\"></a>UI － UIResponder</h3><h3 id=\"UI-－-UIView\"><a href=\"#UI-－-UIView\" class=\"headerlink\" title=\"UI － UIView\"></a>UI － UIView</h3><h3 id=\"UI-－-UIControl\"><a href=\"#UI-－-UIControl\" class=\"headerlink\" title=\"UI － UIControl\"></a>UI － UIControl</h3><h3 id=\"UI-－-ScrollView\"><a href=\"#UI-－-ScrollView\" class=\"headerlink\" title=\"UI － ScrollView\"></a>UI － ScrollView</h3><h3 id=\"UI-－-TableView\"><a href=\"#UI-－-TableView\" class=\"headerlink\" title=\"UI － TableView\"></a>UI － TableView</h3><h3 id=\"UI-－-CollectionView\"><a href=\"#UI-－-CollectionView\" class=\"headerlink\" title=\"UI － CollectionView\"></a>UI － CollectionView</h3><h3 id=\"UI-－-自定义视图\"><a href=\"#UI-－-自定义视图\" class=\"headerlink\" title=\"UI － 自定义视图\"></a>UI － 自定义视图</h3><h3 id=\"UI-－-CALayer\"><a href=\"#UI-－-CALayer\" class=\"headerlink\" title=\"UI － CALayer\"></a>UI － CALayer</h3><h3 id=\"UI-－-CAAnimation\"><a href=\"#UI-－-CAAnimation\" class=\"headerlink\" title=\"UI － CAAnimation\"></a>UI － CAAnimation</h3>","excerpt":"<p>经过两次面试更加清楚地认识到，面试“绝对”没有运气的成分，所有结果都是平时积累的爆发。<br>做的项目也算是不少，Java，Web，iOS均有实际项目开发上线经验，为什么面试如此失败呢？<br>反省自身，开发时只求结果只求进度，却没有去深究原理，虽则有良好的编程习惯，项目表面上良好地运行，终究也只不过是码农而已，离工程师相去甚远。</p>\n<p><strong>Stay hungry. Stay foolish.</strong><br>","more":"</p>\n<p>制定一个学习和复习的计划，目的是重新扎实基础，了解“正确开发”的本质和原因，督促自己阅读源码，耐心动手实践。</p>\n<h2 id=\"罗列计划要看的书-划去的书已通读一遍-：\"><a href=\"#罗列计划要看的书-划去的书已通读一遍-：\" class=\"headerlink\" title=\"罗列计划要看的书(划去的书已通读一遍)：\"></a>罗列计划要看的书(划去的书已通读一遍)：</h2><p><strong>程序设计基础</strong><br>数据结构与算法分析：C语言描述+中文版<br>傅清祥算法与数据结构<br>计算机程序设计艺术（这个只能涉猎）<br>编程珠玑<br>编程之美<br>设计模式之禅（第2版）<br>人月神话<br>重构_改善既有代码的设计</p>\n<p><strong>iOS</strong><br><del>iOS开发指南</del><br>Objective-C程序设计  第6版<br>精通iOS开发<br>iOS开发进阶<br>Objective-C基础教程高清中文版（第2版）<br>Objective-C编程之道：IOS设计模式解析<br>Objective-C高级编程 iOS与OS X多线程和内存管理<br>Effective Objective-C 2.0  编写高质量iOS与OS X代码的52个有效方法</p>\n<h2 id=\"罗列必须要看的API：\"><a href=\"#罗列必须要看的API：\" class=\"headerlink\" title=\"罗列必须要看的API：\"></a>罗列必须要看的API：</h2><p><a href=\"http://opensource.apple.com\">Apple Open Source</a><br><a href=\"https://developer.apple.com/reference/\">API Reference</a><br><a href=\"https://developer.apple.com/library/prerelease/content/navigation/\">Guides and Sample Code</a><br><a href=\"https://swift.org/download/#using-downloads\">Swift开源</a></p>\n<h2 id=\"罗列有价值的教程：\"><a href=\"#罗列有价值的教程：\" class=\"headerlink\" title=\"罗列有价值的教程：\"></a>罗列有价值的教程：</h2><p><a href=\"http://open.163.com/movie/2014/1/M/7/M9H7S9F1H_M9H7TMJM7.html\">斯坦福公开课：iOS 7应用开发</a></p>\n<h2 id=\"罗列有价值的Blog：\"><a href=\"#罗列有价值的Blog：\" class=\"headerlink\" title=\"罗列有价值的Blog：\"></a>罗列有价值的Blog：</h2><p><a href=\"http://blog.devtang.com\">@唐巧</a><br><a href=\"http://blog.sunnyxx.com\">@sunnyxx</a><br><a href=\"http://blog.ibireme.com\">@ibireme</a></p>\n<h2 id=\"罗列必须要研究到清楚明白的知识点：\"><a href=\"#罗列必须要研究到清楚明白的知识点：\" class=\"headerlink\" title=\"罗列必须要研究到清楚明白的知识点：\"></a>罗列必须要研究到清楚明白的知识点：</h2><h3 id=\"基础-－-对象\"><a href=\"#基础-－-对象\" class=\"headerlink\" title=\"基础 － 对象\"></a><strong>基础 － 对象</strong></h3><h3 id=\"基础-－-类\"><a href=\"#基础-－-类\" class=\"headerlink\" title=\"基础 － 类\"></a><strong>基础 － 类</strong></h3><h3 id=\"基础-－-方法\"><a href=\"#基础-－-方法\" class=\"headerlink\" title=\"基础 － 方法\"></a><strong>基础 － 方法</strong></h3><h3 id=\"内存-－-堆\"><a href=\"#内存-－-堆\" class=\"headerlink\" title=\"内存 － 堆\"></a>内存 － 堆</h3><h3 id=\"内存-－-栈\"><a href=\"#内存-－-栈\" class=\"headerlink\" title=\"内存 － 栈\"></a>内存 － 栈</h3><h3 id=\"内存-－-指针\"><a href=\"#内存-－-指针\" class=\"headerlink\" title=\"内存 － 指针\"></a>内存 － 指针</h3><h3 id=\"内存-－-进程\"><a href=\"#内存-－-进程\" class=\"headerlink\" title=\"内存 － 进程\"></a>内存 － 进程</h3><h3 id=\"内存-－-线程\"><a href=\"#内存-－-线程\" class=\"headerlink\" title=\"内存 － 线程\"></a>内存 － 线程</h3><h3 id=\"内存-－-MRC\"><a href=\"#内存-－-MRC\" class=\"headerlink\" title=\"内存 － MRC\"></a>内存 － MRC</h3><h3 id=\"内存-－-ARC\"><a href=\"#内存-－-ARC\" class=\"headerlink\" title=\"内存 － ARC\"></a>内存 － ARC</h3><h3 id=\"多线程-－-GCD\"><a href=\"#多线程-－-GCD\" class=\"headerlink\" title=\"多线程 － GCD\"></a><strong>多线程 － GCD</strong></h3><h3 id=\"多线程-－-NSOperationQueue\"><a href=\"#多线程-－-NSOperationQueue\" class=\"headerlink\" title=\"多线程 － NSOperationQueue\"></a>多线程 － NSOperationQueue</h3><h3 id=\"多线程-－-锁\"><a href=\"#多线程-－-锁\" class=\"headerlink\" title=\"多线程 － 锁\"></a>多线程 － 锁</h3><h3 id=\"RunLoop\"><a href=\"#RunLoop\" class=\"headerlink\" title=\"RunLoop\"></a>RunLoop</h3><h3 id=\"Runtime-amp-isa\"><a href=\"#Runtime-amp-isa\" class=\"headerlink\" title=\"Runtime &amp; isa\"></a>Runtime &amp; isa</h3><h3 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h3><h3 id=\"Delegate\"><a href=\"#Delegate\" class=\"headerlink\" title=\"Delegate\"></a>Delegate</h3><h3 id=\"设计模式-－-单例\"><a href=\"#设计模式-－-单例\" class=\"headerlink\" title=\"设计模式 － 单例\"></a>设计模式 － 单例</h3><h3 id=\"设计模式-－-代理\"><a href=\"#设计模式-－-代理\" class=\"headerlink\" title=\"设计模式 － 代理\"></a>设计模式 － 代理</h3><h3 id=\"设计模式-－-观察者\"><a href=\"#设计模式-－-观察者\" class=\"headerlink\" title=\"设计模式 － 观察者\"></a>设计模式 － 观察者</h3><h3 id=\"架构-－-MVC\"><a href=\"#架构-－-MVC\" class=\"headerlink\" title=\"架构 － MVC\"></a>架构 － MVC</h3><h3 id=\"JSON解析\"><a href=\"#JSON解析\" class=\"headerlink\" title=\"JSON解析\"></a>JSON解析</h3><h3 id=\"网络-－-NSURLConnection\"><a href=\"#网络-－-NSURLConnection\" class=\"headerlink\" title=\"网络 － NSURLConnection\"></a>网络 － NSURLConnection</h3><h3 id=\"网络-－-AFNetworking\"><a href=\"#网络-－-AFNetworking\" class=\"headerlink\" title=\"网络 － AFNetworking\"></a>网络 － AFNetworking</h3><h3 id=\"网络-－-SDWebImage\"><a href=\"#网络-－-SDWebImage\" class=\"headerlink\" title=\"网络 － SDWebImage\"></a>网络 － SDWebImage</h3><h3 id=\"UI-－-UIResponder\"><a href=\"#UI-－-UIResponder\" class=\"headerlink\" title=\"UI － UIResponder\"></a>UI － UIResponder</h3><h3 id=\"UI-－-UIView\"><a href=\"#UI-－-UIView\" class=\"headerlink\" title=\"UI － UIView\"></a>UI － UIView</h3><h3 id=\"UI-－-UIControl\"><a href=\"#UI-－-UIControl\" class=\"headerlink\" title=\"UI － UIControl\"></a>UI － UIControl</h3><h3 id=\"UI-－-ScrollView\"><a href=\"#UI-－-ScrollView\" class=\"headerlink\" title=\"UI － ScrollView\"></a>UI － ScrollView</h3><h3 id=\"UI-－-TableView\"><a href=\"#UI-－-TableView\" class=\"headerlink\" title=\"UI － TableView\"></a>UI － TableView</h3><h3 id=\"UI-－-CollectionView\"><a href=\"#UI-－-CollectionView\" class=\"headerlink\" title=\"UI － CollectionView\"></a>UI － CollectionView</h3><h3 id=\"UI-－-自定义视图\"><a href=\"#UI-－-自定义视图\" class=\"headerlink\" title=\"UI － 自定义视图\"></a>UI － 自定义视图</h3><h3 id=\"UI-－-CALayer\"><a href=\"#UI-－-CALayer\" class=\"headerlink\" title=\"UI － CALayer\"></a>UI － CALayer</h3><h3 id=\"UI-－-CAAnimation\"><a href=\"#UI-－-CAAnimation\" class=\"headerlink\" title=\"UI － CAAnimation\"></a>UI － CAAnimation</h3>"},{"title":"理解GCD原理","date":"2016-08-11T12:34:23.000Z","_content":"\nGCD是老生常谈了，不过作为一个新手这个基础乃是重中之重，光看他人的blog总是难以消化，因此自己做些笔记总结实验一下，如有偏差还望指正。\n<!-- more -->\n\n## 前提\n1. 代码是顺序执行的。\n2. queue是FIFO（先进先出）的数据结构。\n3. 线程之间是并行的。\n4. `串行队列`：任务`不能同时进行`，这意味着第n+1个任务必须等待0...n个任务全部完成后才会开始。\n5. `并发队列`：任务`可以同时进行`，这意味着只要0...n个任务开始执行，那么第n+1个任务也可以开始。\n6. `void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);`：将任务（也就是block）放到队列中，同步执行，也就是说在`当前线程`中执行任务，`阻塞当前线程`。\n7. `void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);`：将任务放到队列中，异步执行，也就是说在`其他线程`中执行任务，`不阻塞当前线程`。（在下文的推演中，发现其并不总是在`其他线程`中执行）\n（p.s. 在实际推演和API中，发现6、7两条中对于线程的描述均是错误的，block在哪个线程中运行取决于queue）\n\n## 验证\n### 1. 代码是顺序执行的。\n```\n    NSLog(@\"step0\");\n    NSLog(@\"step1\");\n```\n\n```\n    2016-08-12 22:29:49.002 MyPractice[25215:3752290] step0\n    2016-08-12 22:29:49.002 MyPractice[25215:3752290] step1\n```\n可以看到确实是顺序执行的（严肃脸）。\n\n### 2. queue是FIFO（先进先出）的数据结构。\n\n### 3. 线程之间是并行的。\n\n### 4. `串行队列`：任务`不能同时进行`，这意味着第n+1个任务必须等待0...n个任务全部完成后才会开始。\n首先来看什么是`DISPATCH_QUEUE_SERIAL`。\n```\n    /*!\n     * @const DISPATCH_QUEUE_SERIAL\n     * @discussion A dispatch queue that invokes blocks serially in FIFO order.\n     */\n    #define DISPATCH_QUEUE_SERIAL NULL\n```\n该队列以先进先出的顺序串行调用blocks。\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    for (int i = 0; i < 3; i++) {\n        dispatch_async(queue, ^{\n            [NSThread sleepForTimeInterval:1];\n            NSLog(@\"step1.%d finished! - %@\", i, [NSThread currentThread]);\n        });\n    }\n    \n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 22:49:03.733 MyPractice[32046:5376787] step0 finished! - <NSThread: 0x7fac03602dd0>{number = 1, name = main}\n2016-08-13 22:49:03.734 MyPractice[32046:5376787] step2 finished! - <NSThread: 0x7fac03602dd0>{number = 1, name = main}\n2016-08-13 22:49:04.737 MyPractice[32046:5376906] step1.0 finished! - <NSThread: 0x7fac034a0690>{number = 2, name = (null)}\n2016-08-13 22:49:05.741 MyPractice[32046:5376906] step1.1 finished! - <NSThread: 0x7fac034a0690>{number = 2, name = (null)}\n2016-08-13 22:49:06.747 MyPractice[32046:5376906] step1.2 finished! - <NSThread: 0x7fac034a0690>{number = 2, name = (null)}\n```\n可以看到1大类中的三个任务顺序执行。\n\n### 5. `并发队列`：任务`可以同时进行`，这意味着只要0...n个任务开始执行，那么第n+1个任务也可以开始。\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_CONCURRENT);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    for (int i = 0; i < 3; i++) {\n        dispatch_async(queue, ^{\n            [NSThread sleepForTimeInterval:1];\n            NSLog(@\"step1.%d finished! - %@\", i, [NSThread currentThread]);\n        });\n    }\n    \n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 04:21:14.000 MyPractice[27321:4331458] step0 finished! - <NSThread: 0x7f9c08c059f0>{number = 1, name = main}\n2016-08-13 04:21:14.001 MyPractice[27321:4331458] step2 finished! - <NSThread: 0x7f9c08c059f0>{number = 1, name = main}\n2016-08-13 04:21:15.005 MyPractice[27321:4331587] step1.1 finished! - <NSThread: 0x7f9c08f04540>{number = 3, name = (null)}\n2016-08-13 04:21:15.005 MyPractice[27321:4331577] step1.0 finished! - <NSThread: 0x7f9c08d0acc0>{number = 2, name = (null)}\n2016-08-13 04:21:15.005 MyPractice[27321:4331593] step1.2 finished! - <NSThread: 0x7f9c08e0b560>{number = 4, name = (null)}\n```\n可以看到1大类中的三个任务同时执行。\n\n### 6. `void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);`：将任务（也就是block）放到队列中，同步执行，也就是说在`当前线程`中执行任务，`阻塞当前线程`。\n#### dispatch_sync任务到其它串行队列中。\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_sync(queue, ^{    // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 04:28:39.621 MyPractice[27486:4339739] step0 finished! - <NSThread: 0x7f8050606ad0>{number = 1, name = main}\n2016-08-13 04:28:40.622 MyPractice[27486:4339739] step1 finished! - <NSThread: 0x7f8050606ad0>{number = 1, name = main}\n2016-08-13 04:28:42.623 MyPractice[27486:4339739] step2 finished! - <NSThread: 0x7f8050606ad0>{number = 1, name = main}\n```\nblock1处于用于用户自定义串行队列中，由当前线程（主线程）执行，阻塞主线程，step2必须等待block1返回后方可开始执行。\n\n#### dispatch_sync任务到当前串行队列中。\n\n```\n    dispatch_queue_t queue = dispatch_get_main_queue();\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_sync(queue, ^{     // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 04:35:51.992 MyPractice[27577:4345752] step0 finished! - <NSThread: 0x7f80d8701fc0>{number = 1, name = main}\n```\n整体为主队列中的block0，执行完step0后等待block1返回，然后才可执行step2；同时block1插入主队列，阻塞主线程，此时主队列中还有未完成的任务block0，因此block1开始等待block1完成。\n至此，block0与block1循环等待，死锁。\n\n#### dispatch_sync任务到其它并发队列中。\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_CONCURRENT);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_sync(queue, ^{     // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 04:41:45.625 MyPractice[27630:4348773] step0 finished! - <NSThread: 0x7faec9403070>{number = 1, name = main}\n2016-08-13 04:41:46.625 MyPractice[27630:4348773] step1 finished! - <NSThread: 0x7faec9403070>{number = 1, name = main}\n2016-08-13 04:41:48.627 MyPractice[27630:4348773] step2 finished! - <NSThread: 0x7faec9403070>{number = 1, name = main}\n```\nstep0执行完毕，block1插入用户自定义并发队列，仍在当前线程（主线程）执行，因此阻塞主线程，此时的并发队列前没有其它任务，block1正常执行完毕返回，开始执行step2。\n\n**总结**\n```\n/*!\n * @function dispatch_sync\n *\n * @abstract\n * Submits a block for synchronous execution on a dispatch queue.\n *\n * @discussion\n * Submits a block to a dispatch queue like dispatch_async(), however\n * dispatch_sync() will not return until the block has finished.\n *\n * Calls to dispatch_sync() targeting the current queue will result\n * in dead-lock. Use of dispatch_sync() is also subject to the same\n * multi-party dead-lock problems that may result from the use of a mutex.\n * Use of dispatch_async() is preferred.\n *\n * Unlike dispatch_async(), no retain is performed on the target queue. Because\n * calls to this function are synchronous, the dispatch_sync() \"borrows\" the\n * reference of the caller.\n *\n * As an optimization, dispatch_sync() invokes the block on the current\n * thread when possible.\n *\n * @param queue\n * The target dispatch queue to which the block is submitted.\n * The result of passing NULL in this parameter is undefined.\n *\n * @param block\n * The block to be invoked on the target dispatch queue.\n * The result of passing NULL in this parameter is undefined.\n */\n#ifdef __BLOCKS__\n__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)\nDISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW\nvoid\ndispatch_sync(dispatch_queue_t queue, dispatch_block_t block);\n#endif\n```\n- dispatch_sync()在block结束前不会返回。\n- dispatch_sync()任务到当前队列中会引起死锁。\n- 系统不会retain目标队列，因为dispatch_sync()是同步执行的，它“借”走了其调度者的引用。（这里我理解为，同步执行的任务不完成不会返回，因此引用从外部跟着它进入了block内部，在任务完成后再回到外部）。\n- dispatch_sync()可能会无视queue的类型，优先在当前线程执行任务。（不知在什么情况下不会在当前线程执行，此处留个心眼）。\n- 参数queue － block任务提交的目标队列；如果传递进来的queue为NULL，返回结果为undefined。\n- 参数block － 将要在目标队列中执行的任务；如果传递进来的block为NULL，返回结果为undedined。\n\n### 7. `void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);`：将任务放到队列中，异步执行，也就是说在`其他线程`中执行任务，`不阻塞当前线程`。\n#### dispatch_async任务到其它串行队列中。\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_async(queue, ^{     // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 05:06:15.123 MyPractice[27791:4366095] step0 finished! - <NSThread: 0x7fe7196022e0>{number = 1, name = main}\n2016-08-13 05:06:16.129 MyPractice[27791:4366129] step1 finished! - <NSThread: 0x7fe7196a2f50>{number = 2, name = (null)}\n2016-08-13 05:06:17.125 MyPractice[27791:4366095] step2 finished! - <NSThread: 0x7fe7196022e0>{number = 1, name = main}\n```\n执行顺序为step0 -> step1 -> step2，step1在其它线程上执行，注意step2与step0时差2秒，step1与step0时差1秒，也就是说step1与step2并行。\n程序运行到step0，step1插入用户自定义串行队列，在其它线程执行，不阻塞当前线程（主线程），并立即返回，于是step2开始执行。\n\n#### dispatch_async任务到当前串行队列中。\n\n```\n    dispatch_queue_t queue = dispatch_get_main_queue();\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_async(queue, ^{     // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 05:10:43.516 MyPractice[27830:4369848] step0 finished! - <NSThread: 0x7fc280d07d30>{number = 1, name = main}\n2016-08-13 05:10:45.518 MyPractice[27830:4369848] step2 finished! - <NSThread: 0x7fc280d07d30>{number = 1, name = main}\n2016-08-13 05:10:46.524 MyPractice[27830:4369848] step1 finished! - <NSThread: 0x7fc280d07d30>{number = 1, name = main}\n```\n执行顺序为step0 -> step2 -> step1，step1在主线程上执行（这与我们猜想的新开线程不一致，说明我们的猜想错了，至于为什么，先放一放，后面再说），从执行时间来看任务是串行执行的。\n执行完step0，step1插入主队列，不阻塞当前线程（主线程）并立即返回，开始执行step2，但是block1却必须等待block0执行完毕，因此step1在step2结束后开始执行。\n\n#### dispatch_async任务到其他并发队列中。\n已经在5. xxx中实验过，3个任务在3个不同的线程上异步执行。\n\n**总结**\n```\n/*!\n * @function dispatch_async\n *\n * @abstract\n * Submits a block for asynchronous execution on a dispatch queue.\n *\n * @discussion\n * The dispatch_async() function is the fundamental mechanism for submitting\n * blocks to a dispatch queue.\n *\n * Calls to dispatch_async() always return immediately after the block has\n * been submitted, and never wait for the block to be invoked.\n *\n * The target queue determines whether the block will be invoked serially or\n * concurrently with respect to other blocks submitted to that same queue.\n * Serial queues are processed concurrently with respect to each other.\n *\n * @param queue\n * The target dispatch queue to which the block is submitted.\n * The system will hold a reference on the target queue until the block\n * has finished.\n * The result of passing NULL in this parameter is undefined.\n *\n * @param block\n * The block to submit to the target dispatch queue. This function performs\n * Block_copy() and Block_release() on behalf of callers.\n * The result of passing NULL in this parameter is undefined.\n */\n#ifdef __BLOCKS__\n__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)\nDISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW\nvoid\ndispatch_async(dispatch_queue_t queue, dispatch_block_t block);\n#endif\n```\n- dispatch_async()的机制是把blocks任务提交到队列中。\n- dispatch_async()会立即返回而不会等待block完成。\n- 目标队列的类型决定任务是按照队列里任务的顺序串行或并发地执行；串行队列之间是并发的。\n**这里我的理解是，如果dispatch_async任务到一个并发队列中，那么任务就会被委派到一个新线程中执行，而如果放入一个串行队列，那么它有可能在当前线程执行，也有可能在其他线程执行。在上文实验中出现特例的是主队列，同时它也是当前队列，而主队列又是特殊的串行队列，它只在主线程上执行。这里的主队列比较特殊，不能根据它做出准确结论，我们需要再做一些实验**\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_async(queue, ^{     // block1.1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1.1 finished! - %@\", [NSThread currentThread]);\n        \n        dispatch_async(queue, ^{     // block1.2\n            [NSThread sleepForTimeInterval:1];\n            NSLog(@\"step1.2 finished! - %@\", [NSThread currentThread]);\n        });\n    });\n    \n    dispatch_async(queue, ^{     // block1.3\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1.3 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:3];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 11:03:07.821 MyPractice[28927:4454751] step0 finished! - <NSThread: 0x7fbe786079a0>{number = 1, name = main}\n2016-08-13 11:03:08.827 MyPractice[28927:4454778] step1.1 finished! - <NSThread: 0x7fbe78419320>{number = 2, name = (null)}\n2016-08-13 11:03:09.831 MyPractice[28927:4454778] step1.3 finished! - <NSThread: 0x7fbe78419320>{number = 2, name = (null)}\n2016-08-13 11:03:10.823 MyPractice[28927:4454751] step2 finished! - <NSThread: 0x7fbe786079a0>{number = 1, name = main}\n2016-08-13 11:03:10.832 MyPractice[28927:4454778] step1.2 finished! - <NSThread: 0x7fbe78419320>{number = 2, name = (null)}\n```\nblock1.1不在当前线程（主线程）中执行，而是在新线程（0x7fbe78419320）中，从当前线程切换到了新线程；\nblock1.2仍然在当前线程（0x7fbe78419320）中执行；\n另外，block1.3也在（0x7fbe78419320）这一线程中执行，同样没有进入一个新线程；\n\n结合实验的结果和一些blog的说法，我认为block在哪个线程取决于queue，对于每个queue来说，它和线程池有某种对应关系：\n- 主队列对应着主线程；\n- 并发队列对应多条线程（非主线程）；\n- 串行队列对应着一条线程（非主线程）；\n- dispatch_sync&dispatch_async：调度对应线程池中的线程；\n\n接下来继续解读官方API\n- 系统会保留目标队列的引用直到block结束。（queue中有任务时不会释放）\n- 参数queue － block任务提交的目标队列；如果传递进来的queue为NULL，返回结果为undefined。\n- dispatch_async()会代替它的调用者执行Block_copy()和Block_realease()。（block进入queue时会copy，出queue时会realease）\n- 参数block － 将要在目标队列中执行的任务；如果传递进来的block为NULL，返回结果为undedined。\n\n最后对自己提个问题，既然UI的实现没有多线程支持，那么将UI操作放入一个自定义的队列时，它在哪个线程执行呢？\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    __weak ViewController* weakSelf = self;\n    dispatch_async(queue, ^{     // block1\n        NSLog(@\"before step1! - %@\", [NSThread currentThread]);\n        [NSThread sleepForTimeInterval:1];\n        weakSelf.view.backgroundColor = [UIColor blueColor];\n        NSLog(@\"after step1! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 11:21:46.485 MyPractice[29211:4475426] step0 finished! - <NSThread: 0x7fd5e1403450>{number = 1, name = main}\n2016-08-13 11:21:46.486 MyPractice[29211:4475474] before step1! - <NSThread: 0x7fd5e1523bb0>{number = 2, name = (null)}\n2016-08-13 11:21:47.489 MyPractice[29211:4475474] after step1! - <NSThread: 0x7fd5e1523bb0>{number = 2, name = (null)}\n2016-08-13 11:21:48.486 MyPractice[29211:4475426] step2 finished! - <NSThread: 0x7fd5e1403450>{number = 1, name = main}\n```\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    __weak ViewController* weakSelf = self;\n    dispatch_sync(queue, ^{     // block1\n        NSLog(@\"before step1! - %@\", [NSThread currentThread]);\n        [NSThread sleepForTimeInterval:1];\n        weakSelf.view.backgroundColor = [UIColor blueColor];\n        NSLog(@\"after step1! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 11:22:20.948 MyPractice[29246:4476879] step0 finished! - <NSThread: 0x7f8962402ee0>{number = 1, name = main}\n2016-08-13 11:22:20.949 MyPractice[29246:4476879] before step1! - <NSThread: 0x7f8962402ee0>{number = 1, name = main}\n2016-08-13 11:22:21.950 MyPractice[29246:4476879] after step1! - <NSThread: 0x7f8962402ee0>{number = 1, name = main}\n2016-08-13 11:22:23.952 MyPractice[29246:4476879] step2 finished! - <NSThread: 0x7f8962402ee0>{number = 1, name = main}\n```\n\n可以看到仍然和之前总结的一样，在哪个线程执行仍然取决于queue的类型。\n此处迷茫++，还得继续研究啊...\n","source":"_posts/理解GCD原理.md","raw":"---\ntitle: 理解GCD原理\ndate: 2016-08-11 20:34:23\ncategories: iOS\ntags: \n    - iOS\n    - 多线程\n    - GCD\n---\n\nGCD是老生常谈了，不过作为一个新手这个基础乃是重中之重，光看他人的blog总是难以消化，因此自己做些笔记总结实验一下，如有偏差还望指正。\n<!-- more -->\n\n## 前提\n1. 代码是顺序执行的。\n2. queue是FIFO（先进先出）的数据结构。\n3. 线程之间是并行的。\n4. `串行队列`：任务`不能同时进行`，这意味着第n+1个任务必须等待0...n个任务全部完成后才会开始。\n5. `并发队列`：任务`可以同时进行`，这意味着只要0...n个任务开始执行，那么第n+1个任务也可以开始。\n6. `void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);`：将任务（也就是block）放到队列中，同步执行，也就是说在`当前线程`中执行任务，`阻塞当前线程`。\n7. `void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);`：将任务放到队列中，异步执行，也就是说在`其他线程`中执行任务，`不阻塞当前线程`。（在下文的推演中，发现其并不总是在`其他线程`中执行）\n（p.s. 在实际推演和API中，发现6、7两条中对于线程的描述均是错误的，block在哪个线程中运行取决于queue）\n\n## 验证\n### 1. 代码是顺序执行的。\n```\n    NSLog(@\"step0\");\n    NSLog(@\"step1\");\n```\n\n```\n    2016-08-12 22:29:49.002 MyPractice[25215:3752290] step0\n    2016-08-12 22:29:49.002 MyPractice[25215:3752290] step1\n```\n可以看到确实是顺序执行的（严肃脸）。\n\n### 2. queue是FIFO（先进先出）的数据结构。\n\n### 3. 线程之间是并行的。\n\n### 4. `串行队列`：任务`不能同时进行`，这意味着第n+1个任务必须等待0...n个任务全部完成后才会开始。\n首先来看什么是`DISPATCH_QUEUE_SERIAL`。\n```\n    /*!\n     * @const DISPATCH_QUEUE_SERIAL\n     * @discussion A dispatch queue that invokes blocks serially in FIFO order.\n     */\n    #define DISPATCH_QUEUE_SERIAL NULL\n```\n该队列以先进先出的顺序串行调用blocks。\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    for (int i = 0; i < 3; i++) {\n        dispatch_async(queue, ^{\n            [NSThread sleepForTimeInterval:1];\n            NSLog(@\"step1.%d finished! - %@\", i, [NSThread currentThread]);\n        });\n    }\n    \n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 22:49:03.733 MyPractice[32046:5376787] step0 finished! - <NSThread: 0x7fac03602dd0>{number = 1, name = main}\n2016-08-13 22:49:03.734 MyPractice[32046:5376787] step2 finished! - <NSThread: 0x7fac03602dd0>{number = 1, name = main}\n2016-08-13 22:49:04.737 MyPractice[32046:5376906] step1.0 finished! - <NSThread: 0x7fac034a0690>{number = 2, name = (null)}\n2016-08-13 22:49:05.741 MyPractice[32046:5376906] step1.1 finished! - <NSThread: 0x7fac034a0690>{number = 2, name = (null)}\n2016-08-13 22:49:06.747 MyPractice[32046:5376906] step1.2 finished! - <NSThread: 0x7fac034a0690>{number = 2, name = (null)}\n```\n可以看到1大类中的三个任务顺序执行。\n\n### 5. `并发队列`：任务`可以同时进行`，这意味着只要0...n个任务开始执行，那么第n+1个任务也可以开始。\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_CONCURRENT);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    for (int i = 0; i < 3; i++) {\n        dispatch_async(queue, ^{\n            [NSThread sleepForTimeInterval:1];\n            NSLog(@\"step1.%d finished! - %@\", i, [NSThread currentThread]);\n        });\n    }\n    \n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 04:21:14.000 MyPractice[27321:4331458] step0 finished! - <NSThread: 0x7f9c08c059f0>{number = 1, name = main}\n2016-08-13 04:21:14.001 MyPractice[27321:4331458] step2 finished! - <NSThread: 0x7f9c08c059f0>{number = 1, name = main}\n2016-08-13 04:21:15.005 MyPractice[27321:4331587] step1.1 finished! - <NSThread: 0x7f9c08f04540>{number = 3, name = (null)}\n2016-08-13 04:21:15.005 MyPractice[27321:4331577] step1.0 finished! - <NSThread: 0x7f9c08d0acc0>{number = 2, name = (null)}\n2016-08-13 04:21:15.005 MyPractice[27321:4331593] step1.2 finished! - <NSThread: 0x7f9c08e0b560>{number = 4, name = (null)}\n```\n可以看到1大类中的三个任务同时执行。\n\n### 6. `void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);`：将任务（也就是block）放到队列中，同步执行，也就是说在`当前线程`中执行任务，`阻塞当前线程`。\n#### dispatch_sync任务到其它串行队列中。\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_sync(queue, ^{    // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 04:28:39.621 MyPractice[27486:4339739] step0 finished! - <NSThread: 0x7f8050606ad0>{number = 1, name = main}\n2016-08-13 04:28:40.622 MyPractice[27486:4339739] step1 finished! - <NSThread: 0x7f8050606ad0>{number = 1, name = main}\n2016-08-13 04:28:42.623 MyPractice[27486:4339739] step2 finished! - <NSThread: 0x7f8050606ad0>{number = 1, name = main}\n```\nblock1处于用于用户自定义串行队列中，由当前线程（主线程）执行，阻塞主线程，step2必须等待block1返回后方可开始执行。\n\n#### dispatch_sync任务到当前串行队列中。\n\n```\n    dispatch_queue_t queue = dispatch_get_main_queue();\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_sync(queue, ^{     // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 04:35:51.992 MyPractice[27577:4345752] step0 finished! - <NSThread: 0x7f80d8701fc0>{number = 1, name = main}\n```\n整体为主队列中的block0，执行完step0后等待block1返回，然后才可执行step2；同时block1插入主队列，阻塞主线程，此时主队列中还有未完成的任务block0，因此block1开始等待block1完成。\n至此，block0与block1循环等待，死锁。\n\n#### dispatch_sync任务到其它并发队列中。\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_CONCURRENT);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_sync(queue, ^{     // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 04:41:45.625 MyPractice[27630:4348773] step0 finished! - <NSThread: 0x7faec9403070>{number = 1, name = main}\n2016-08-13 04:41:46.625 MyPractice[27630:4348773] step1 finished! - <NSThread: 0x7faec9403070>{number = 1, name = main}\n2016-08-13 04:41:48.627 MyPractice[27630:4348773] step2 finished! - <NSThread: 0x7faec9403070>{number = 1, name = main}\n```\nstep0执行完毕，block1插入用户自定义并发队列，仍在当前线程（主线程）执行，因此阻塞主线程，此时的并发队列前没有其它任务，block1正常执行完毕返回，开始执行step2。\n\n**总结**\n```\n/*!\n * @function dispatch_sync\n *\n * @abstract\n * Submits a block for synchronous execution on a dispatch queue.\n *\n * @discussion\n * Submits a block to a dispatch queue like dispatch_async(), however\n * dispatch_sync() will not return until the block has finished.\n *\n * Calls to dispatch_sync() targeting the current queue will result\n * in dead-lock. Use of dispatch_sync() is also subject to the same\n * multi-party dead-lock problems that may result from the use of a mutex.\n * Use of dispatch_async() is preferred.\n *\n * Unlike dispatch_async(), no retain is performed on the target queue. Because\n * calls to this function are synchronous, the dispatch_sync() \"borrows\" the\n * reference of the caller.\n *\n * As an optimization, dispatch_sync() invokes the block on the current\n * thread when possible.\n *\n * @param queue\n * The target dispatch queue to which the block is submitted.\n * The result of passing NULL in this parameter is undefined.\n *\n * @param block\n * The block to be invoked on the target dispatch queue.\n * The result of passing NULL in this parameter is undefined.\n */\n#ifdef __BLOCKS__\n__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)\nDISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW\nvoid\ndispatch_sync(dispatch_queue_t queue, dispatch_block_t block);\n#endif\n```\n- dispatch_sync()在block结束前不会返回。\n- dispatch_sync()任务到当前队列中会引起死锁。\n- 系统不会retain目标队列，因为dispatch_sync()是同步执行的，它“借”走了其调度者的引用。（这里我理解为，同步执行的任务不完成不会返回，因此引用从外部跟着它进入了block内部，在任务完成后再回到外部）。\n- dispatch_sync()可能会无视queue的类型，优先在当前线程执行任务。（不知在什么情况下不会在当前线程执行，此处留个心眼）。\n- 参数queue － block任务提交的目标队列；如果传递进来的queue为NULL，返回结果为undefined。\n- 参数block － 将要在目标队列中执行的任务；如果传递进来的block为NULL，返回结果为undedined。\n\n### 7. `void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);`：将任务放到队列中，异步执行，也就是说在`其他线程`中执行任务，`不阻塞当前线程`。\n#### dispatch_async任务到其它串行队列中。\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_async(queue, ^{     // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 05:06:15.123 MyPractice[27791:4366095] step0 finished! - <NSThread: 0x7fe7196022e0>{number = 1, name = main}\n2016-08-13 05:06:16.129 MyPractice[27791:4366129] step1 finished! - <NSThread: 0x7fe7196a2f50>{number = 2, name = (null)}\n2016-08-13 05:06:17.125 MyPractice[27791:4366095] step2 finished! - <NSThread: 0x7fe7196022e0>{number = 1, name = main}\n```\n执行顺序为step0 -> step1 -> step2，step1在其它线程上执行，注意step2与step0时差2秒，step1与step0时差1秒，也就是说step1与step2并行。\n程序运行到step0，step1插入用户自定义串行队列，在其它线程执行，不阻塞当前线程（主线程），并立即返回，于是step2开始执行。\n\n#### dispatch_async任务到当前串行队列中。\n\n```\n    dispatch_queue_t queue = dispatch_get_main_queue();\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_async(queue, ^{     // block1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 05:10:43.516 MyPractice[27830:4369848] step0 finished! - <NSThread: 0x7fc280d07d30>{number = 1, name = main}\n2016-08-13 05:10:45.518 MyPractice[27830:4369848] step2 finished! - <NSThread: 0x7fc280d07d30>{number = 1, name = main}\n2016-08-13 05:10:46.524 MyPractice[27830:4369848] step1 finished! - <NSThread: 0x7fc280d07d30>{number = 1, name = main}\n```\n执行顺序为step0 -> step2 -> step1，step1在主线程上执行（这与我们猜想的新开线程不一致，说明我们的猜想错了，至于为什么，先放一放，后面再说），从执行时间来看任务是串行执行的。\n执行完step0，step1插入主队列，不阻塞当前线程（主线程）并立即返回，开始执行step2，但是block1却必须等待block0执行完毕，因此step1在step2结束后开始执行。\n\n#### dispatch_async任务到其他并发队列中。\n已经在5. xxx中实验过，3个任务在3个不同的线程上异步执行。\n\n**总结**\n```\n/*!\n * @function dispatch_async\n *\n * @abstract\n * Submits a block for asynchronous execution on a dispatch queue.\n *\n * @discussion\n * The dispatch_async() function is the fundamental mechanism for submitting\n * blocks to a dispatch queue.\n *\n * Calls to dispatch_async() always return immediately after the block has\n * been submitted, and never wait for the block to be invoked.\n *\n * The target queue determines whether the block will be invoked serially or\n * concurrently with respect to other blocks submitted to that same queue.\n * Serial queues are processed concurrently with respect to each other.\n *\n * @param queue\n * The target dispatch queue to which the block is submitted.\n * The system will hold a reference on the target queue until the block\n * has finished.\n * The result of passing NULL in this parameter is undefined.\n *\n * @param block\n * The block to submit to the target dispatch queue. This function performs\n * Block_copy() and Block_release() on behalf of callers.\n * The result of passing NULL in this parameter is undefined.\n */\n#ifdef __BLOCKS__\n__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)\nDISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW\nvoid\ndispatch_async(dispatch_queue_t queue, dispatch_block_t block);\n#endif\n```\n- dispatch_async()的机制是把blocks任务提交到队列中。\n- dispatch_async()会立即返回而不会等待block完成。\n- 目标队列的类型决定任务是按照队列里任务的顺序串行或并发地执行；串行队列之间是并发的。\n**这里我的理解是，如果dispatch_async任务到一个并发队列中，那么任务就会被委派到一个新线程中执行，而如果放入一个串行队列，那么它有可能在当前线程执行，也有可能在其他线程执行。在上文实验中出现特例的是主队列，同时它也是当前队列，而主队列又是特殊的串行队列，它只在主线程上执行。这里的主队列比较特殊，不能根据它做出准确结论，我们需要再做一些实验**\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    dispatch_async(queue, ^{     // block1.1\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1.1 finished! - %@\", [NSThread currentThread]);\n        \n        dispatch_async(queue, ^{     // block1.2\n            [NSThread sleepForTimeInterval:1];\n            NSLog(@\"step1.2 finished! - %@\", [NSThread currentThread]);\n        });\n    });\n    \n    dispatch_async(queue, ^{     // block1.3\n        [NSThread sleepForTimeInterval:1];\n        NSLog(@\"step1.3 finished! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:3];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 11:03:07.821 MyPractice[28927:4454751] step0 finished! - <NSThread: 0x7fbe786079a0>{number = 1, name = main}\n2016-08-13 11:03:08.827 MyPractice[28927:4454778] step1.1 finished! - <NSThread: 0x7fbe78419320>{number = 2, name = (null)}\n2016-08-13 11:03:09.831 MyPractice[28927:4454778] step1.3 finished! - <NSThread: 0x7fbe78419320>{number = 2, name = (null)}\n2016-08-13 11:03:10.823 MyPractice[28927:4454751] step2 finished! - <NSThread: 0x7fbe786079a0>{number = 1, name = main}\n2016-08-13 11:03:10.832 MyPractice[28927:4454778] step1.2 finished! - <NSThread: 0x7fbe78419320>{number = 2, name = (null)}\n```\nblock1.1不在当前线程（主线程）中执行，而是在新线程（0x7fbe78419320）中，从当前线程切换到了新线程；\nblock1.2仍然在当前线程（0x7fbe78419320）中执行；\n另外，block1.3也在（0x7fbe78419320）这一线程中执行，同样没有进入一个新线程；\n\n结合实验的结果和一些blog的说法，我认为block在哪个线程取决于queue，对于每个queue来说，它和线程池有某种对应关系：\n- 主队列对应着主线程；\n- 并发队列对应多条线程（非主线程）；\n- 串行队列对应着一条线程（非主线程）；\n- dispatch_sync&dispatch_async：调度对应线程池中的线程；\n\n接下来继续解读官方API\n- 系统会保留目标队列的引用直到block结束。（queue中有任务时不会释放）\n- 参数queue － block任务提交的目标队列；如果传递进来的queue为NULL，返回结果为undefined。\n- dispatch_async()会代替它的调用者执行Block_copy()和Block_realease()。（block进入queue时会copy，出queue时会realease）\n- 参数block － 将要在目标队列中执行的任务；如果传递进来的block为NULL，返回结果为undedined。\n\n最后对自己提个问题，既然UI的实现没有多线程支持，那么将UI操作放入一个自定义的队列时，它在哪个线程执行呢？\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    __weak ViewController* weakSelf = self;\n    dispatch_async(queue, ^{     // block1\n        NSLog(@\"before step1! - %@\", [NSThread currentThread]);\n        [NSThread sleepForTimeInterval:1];\n        weakSelf.view.backgroundColor = [UIColor blueColor];\n        NSLog(@\"after step1! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 11:21:46.485 MyPractice[29211:4475426] step0 finished! - <NSThread: 0x7fd5e1403450>{number = 1, name = main}\n2016-08-13 11:21:46.486 MyPractice[29211:4475474] before step1! - <NSThread: 0x7fd5e1523bb0>{number = 2, name = (null)}\n2016-08-13 11:21:47.489 MyPractice[29211:4475474] after step1! - <NSThread: 0x7fd5e1523bb0>{number = 2, name = (null)}\n2016-08-13 11:21:48.486 MyPractice[29211:4475426] step2 finished! - <NSThread: 0x7fd5e1403450>{number = 1, name = main}\n```\n\n```\n    dispatch_queue_t queue = dispatch_queue_create(\"cn.edu.bjtu.myQueue\", DISPATCH_QUEUE_SERIAL);\n    \n    NSLog(@\"step0 finished! - %@\", [NSThread currentThread]);\n    \n    __weak ViewController* weakSelf = self;\n    dispatch_sync(queue, ^{     // block1\n        NSLog(@\"before step1! - %@\", [NSThread currentThread]);\n        [NSThread sleepForTimeInterval:1];\n        weakSelf.view.backgroundColor = [UIColor blueColor];\n        NSLog(@\"after step1! - %@\", [NSThread currentThread]);\n    });\n    \n    [NSThread sleepForTimeInterval:2];\n    NSLog(@\"step2 finished! - %@\", [NSThread currentThread]);\n```\n\n```\n2016-08-13 11:22:20.948 MyPractice[29246:4476879] step0 finished! - <NSThread: 0x7f8962402ee0>{number = 1, name = main}\n2016-08-13 11:22:20.949 MyPractice[29246:4476879] before step1! - <NSThread: 0x7f8962402ee0>{number = 1, name = main}\n2016-08-13 11:22:21.950 MyPractice[29246:4476879] after step1! - <NSThread: 0x7f8962402ee0>{number = 1, name = main}\n2016-08-13 11:22:23.952 MyPractice[29246:4476879] step2 finished! - <NSThread: 0x7f8962402ee0>{number = 1, name = main}\n```\n\n可以看到仍然和之前总结的一样，在哪个线程执行仍然取决于queue的类型。\n此处迷茫++，还得继续研究啊...\n","slug":"理解GCD原理","published":1,"updated":"2016-08-15T11:02:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisig8xnu0005zpk5qjkaotkt","content":"<p>GCD是老生常谈了，不过作为一个新手这个基础乃是重中之重，光看他人的blog总是难以消化，因此自己做些笔记总结实验一下，如有偏差还望指正。<br><a id=\"more\"></a></p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ol>\n<li>代码是顺序执行的。</li>\n<li>queue是FIFO（先进先出）的数据结构。</li>\n<li>线程之间是并行的。</li>\n<li><code>串行队列</code>：任务<code>不能同时进行</code>，这意味着第n+1个任务必须等待0…n个任务全部完成后才会开始。</li>\n<li><code>并发队列</code>：任务<code>可以同时进行</code>，这意味着只要0…n个任务开始执行，那么第n+1个任务也可以开始。</li>\n<li><code>void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);</code>：将任务（也就是block）放到队列中，同步执行，也就是说在<code>当前线程</code>中执行任务，<code>阻塞当前线程</code>。</li>\n<li><code>void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</code>：将任务放到队列中，异步执行，也就是说在<code>其他线程</code>中执行任务，<code>不阻塞当前线程</code>。（在下文的推演中，发现其并不总是在<code>其他线程</code>中执行）<br>（p.s. 在实际推演和API中，发现6、7两条中对于线程的描述均是错误的，block在哪个线程中运行取决于queue）</li>\n</ol>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><h3 id=\"1-代码是顺序执行的。\"><a href=\"#1-代码是顺序执行的。\" class=\"headerlink\" title=\"1. 代码是顺序执行的。\"></a>1. 代码是顺序执行的。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSLog(@&quot;step0&quot;);</div><div class=\"line\">NSLog(@&quot;step1&quot;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-12 22:29:49.002 MyPractice[25215:3752290] step0</div><div class=\"line\">2016-08-12 22:29:49.002 MyPractice[25215:3752290] step1</div></pre></td></tr></table></figure>\n<p>可以看到确实是顺序执行的（严肃脸）。</p>\n<h3 id=\"2-queue是FIFO（先进先出）的数据结构。\"><a href=\"#2-queue是FIFO（先进先出）的数据结构。\" class=\"headerlink\" title=\"2. queue是FIFO（先进先出）的数据结构。\"></a>2. queue是FIFO（先进先出）的数据结构。</h3><h3 id=\"3-线程之间是并行的。\"><a href=\"#3-线程之间是并行的。\" class=\"headerlink\" title=\"3. 线程之间是并行的。\"></a>3. 线程之间是并行的。</h3><h3 id=\"4-串行队列：任务不能同时进行，这意味着第n-1个任务必须等待0…n个任务全部完成后才会开始。\"><a href=\"#4-串行队列：任务不能同时进行，这意味着第n-1个任务必须等待0…n个任务全部完成后才会开始。\" class=\"headerlink\" title=\"4. 串行队列：任务不能同时进行，这意味着第n+1个任务必须等待0…n个任务全部完成后才会开始。\"></a>4. <code>串行队列</code>：任务<code>不能同时进行</code>，这意味着第n+1个任务必须等待0…n个任务全部完成后才会开始。</h3><p>首先来看什么是<code>DISPATCH_QUEUE_SERIAL</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*!</div><div class=\"line\"> * @const DISPATCH_QUEUE_SERIAL</div><div class=\"line\"> * @discussion A dispatch queue that invokes blocks serially in FIFO order.</div><div class=\"line\"> */</div><div class=\"line\">#define DISPATCH_QUEUE_SERIAL NULL</div></pre></td></tr></table></figure></p>\n<p>该队列以先进先出的顺序串行调用blocks。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">for (int i = 0; i &lt; 3; i++) &#123;</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        [NSThread sleepForTimeInterval:1];</div><div class=\"line\">        NSLog(@&quot;step1.%d finished! - %@&quot;, i, [NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 22:49:03.733 MyPractice[32046:5376787] step0 finished! - &lt;NSThread: 0x7fac03602dd0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 22:49:03.734 MyPractice[32046:5376787] step2 finished! - &lt;NSThread: 0x7fac03602dd0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 22:49:04.737 MyPractice[32046:5376906] step1.0 finished! - &lt;NSThread: 0x7fac034a0690&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 22:49:05.741 MyPractice[32046:5376906] step1.1 finished! - &lt;NSThread: 0x7fac034a0690&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 22:49:06.747 MyPractice[32046:5376906] step1.2 finished! - &lt;NSThread: 0x7fac034a0690&gt;&#123;number = 2, name = (null)&#125;</div></pre></td></tr></table></figure>\n<p>可以看到1大类中的三个任务顺序执行。</p>\n<h3 id=\"5-并发队列：任务可以同时进行，这意味着只要0…n个任务开始执行，那么第n-1个任务也可以开始。\"><a href=\"#5-并发队列：任务可以同时进行，这意味着只要0…n个任务开始执行，那么第n-1个任务也可以开始。\" class=\"headerlink\" title=\"5. 并发队列：任务可以同时进行，这意味着只要0…n个任务开始执行，那么第n+1个任务也可以开始。\"></a>5. <code>并发队列</code>：任务<code>可以同时进行</code>，这意味着只要0…n个任务开始执行，那么第n+1个任务也可以开始。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">for (int i = 0; i &lt; 3; i++) &#123;</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        [NSThread sleepForTimeInterval:1];</div><div class=\"line\">        NSLog(@&quot;step1.%d finished! - %@&quot;, i, [NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 04:21:14.000 MyPractice[27321:4331458] step0 finished! - &lt;NSThread: 0x7f9c08c059f0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:21:14.001 MyPractice[27321:4331458] step2 finished! - &lt;NSThread: 0x7f9c08c059f0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:21:15.005 MyPractice[27321:4331587] step1.1 finished! - &lt;NSThread: 0x7f9c08f04540&gt;&#123;number = 3, name = (null)&#125;</div><div class=\"line\">2016-08-13 04:21:15.005 MyPractice[27321:4331577] step1.0 finished! - &lt;NSThread: 0x7f9c08d0acc0&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 04:21:15.005 MyPractice[27321:4331593] step1.2 finished! - &lt;NSThread: 0x7f9c08e0b560&gt;&#123;number = 4, name = (null)&#125;</div></pre></td></tr></table></figure>\n<p>可以看到1大类中的三个任务同时执行。</p>\n<h3 id=\"6-void-dispatch-sync-dispatch-queue-t-queue-dispatch-block-t-block-：将任务（也就是block）放到队列中，同步执行，也就是说在当前线程中执行任务，阻塞当前线程。\"><a href=\"#6-void-dispatch-sync-dispatch-queue-t-queue-dispatch-block-t-block-：将任务（也就是block）放到队列中，同步执行，也就是说在当前线程中执行任务，阻塞当前线程。\" class=\"headerlink\" title=\"6. void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);：将任务（也就是block）放到队列中，同步执行，也就是说在当前线程中执行任务，阻塞当前线程。\"></a>6. <code>void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);</code>：将任务（也就是block）放到队列中，同步执行，也就是说在<code>当前线程</code>中执行任务，<code>阻塞当前线程</code>。</h3><h4 id=\"dispatch-sync任务到其它串行队列中。\"><a href=\"#dispatch-sync任务到其它串行队列中。\" class=\"headerlink\" title=\"dispatch_sync任务到其它串行队列中。\"></a>dispatch_sync任务到其它串行队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_sync(queue, ^&#123;    // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 04:28:39.621 MyPractice[27486:4339739] step0 finished! - &lt;NSThread: 0x7f8050606ad0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:28:40.622 MyPractice[27486:4339739] step1 finished! - &lt;NSThread: 0x7f8050606ad0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:28:42.623 MyPractice[27486:4339739] step2 finished! - &lt;NSThread: 0x7f8050606ad0&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>block1处于用于用户自定义串行队列中，由当前线程（主线程）执行，阻塞主线程，step2必须等待block1返回后方可开始执行。</p>\n<h4 id=\"dispatch-sync任务到当前串行队列中。\"><a href=\"#dispatch-sync任务到当前串行队列中。\" class=\"headerlink\" title=\"dispatch_sync任务到当前串行队列中。\"></a>dispatch_sync任务到当前串行队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_get_main_queue();</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_sync(queue, ^&#123;     // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 04:35:51.992 MyPractice[27577:4345752] step0 finished! - &lt;NSThread: 0x7f80d8701fc0&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>整体为主队列中的block0，执行完step0后等待block1返回，然后才可执行step2；同时block1插入主队列，阻塞主线程，此时主队列中还有未完成的任务block0，因此block1开始等待block1完成。<br>至此，block0与block1循环等待，死锁。</p>\n<h4 id=\"dispatch-sync任务到其它并发队列中。\"><a href=\"#dispatch-sync任务到其它并发队列中。\" class=\"headerlink\" title=\"dispatch_sync任务到其它并发队列中。\"></a>dispatch_sync任务到其它并发队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_sync(queue, ^&#123;     // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 04:41:45.625 MyPractice[27630:4348773] step0 finished! - &lt;NSThread: 0x7faec9403070&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:41:46.625 MyPractice[27630:4348773] step1 finished! - &lt;NSThread: 0x7faec9403070&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:41:48.627 MyPractice[27630:4348773] step2 finished! - &lt;NSThread: 0x7faec9403070&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>step0执行完毕，block1插入用户自定义并发队列，仍在当前线程（主线程）执行，因此阻塞主线程，此时的并发队列前没有其它任务，block1正常执行完毕返回，开始执行step2。</p>\n<p><strong>总结</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*!</div><div class=\"line\"> * @function dispatch_sync</div><div class=\"line\"> *</div><div class=\"line\"> * @abstract</div><div class=\"line\"> * Submits a block for synchronous execution on a dispatch queue.</div><div class=\"line\"> *</div><div class=\"line\"> * @discussion</div><div class=\"line\"> * Submits a block to a dispatch queue like dispatch_async(), however</div><div class=\"line\"> * dispatch_sync() will not return until the block has finished.</div><div class=\"line\"> *</div><div class=\"line\"> * Calls to dispatch_sync() targeting the current queue will result</div><div class=\"line\"> * in dead-lock. Use of dispatch_sync() is also subject to the same</div><div class=\"line\"> * multi-party dead-lock problems that may result from the use of a mutex.</div><div class=\"line\"> * Use of dispatch_async() is preferred.</div><div class=\"line\"> *</div><div class=\"line\"> * Unlike dispatch_async(), no retain is performed on the target queue. Because</div><div class=\"line\"> * calls to this function are synchronous, the dispatch_sync() &quot;borrows&quot; the</div><div class=\"line\"> * reference of the caller.</div><div class=\"line\"> *</div><div class=\"line\"> * As an optimization, dispatch_sync() invokes the block on the current</div><div class=\"line\"> * thread when possible.</div><div class=\"line\"> *</div><div class=\"line\"> * @param queue</div><div class=\"line\"> * The target dispatch queue to which the block is submitted.</div><div class=\"line\"> * The result of passing NULL in this parameter is undefined.</div><div class=\"line\"> *</div><div class=\"line\"> * @param block</div><div class=\"line\"> * The block to be invoked on the target dispatch queue.</div><div class=\"line\"> * The result of passing NULL in this parameter is undefined.</div><div class=\"line\"> */</div><div class=\"line\">#ifdef __BLOCKS__</div><div class=\"line\">__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)</div><div class=\"line\">DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW</div><div class=\"line\">void</div><div class=\"line\">dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);</div><div class=\"line\">#endif</div></pre></td></tr></table></figure></p>\n<ul>\n<li>dispatch_sync()在block结束前不会返回。</li>\n<li>dispatch_sync()任务到当前队列中会引起死锁。</li>\n<li>系统不会retain目标队列，因为dispatch_sync()是同步执行的，它“借”走了其调度者的引用。（这里我理解为，同步执行的任务不完成不会返回，因此引用从外部跟着它进入了block内部，在任务完成后再回到外部）。</li>\n<li>dispatch_sync()可能会无视queue的类型，优先在当前线程执行任务。（不知在什么情况下不会在当前线程执行，此处留个心眼）。</li>\n<li>参数queue － block任务提交的目标队列；如果传递进来的queue为NULL，返回结果为undefined。</li>\n<li>参数block － 将要在目标队列中执行的任务；如果传递进来的block为NULL，返回结果为undedined。</li>\n</ul>\n<h3 id=\"7-void-dispatch-async-dispatch-queue-t-queue-dispatch-block-t-block-：将任务放到队列中，异步执行，也就是说在其他线程中执行任务，不阻塞当前线程。\"><a href=\"#7-void-dispatch-async-dispatch-queue-t-queue-dispatch-block-t-block-：将任务放到队列中，异步执行，也就是说在其他线程中执行任务，不阻塞当前线程。\" class=\"headerlink\" title=\"7. void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);：将任务放到队列中，异步执行，也就是说在其他线程中执行任务，不阻塞当前线程。\"></a>7. <code>void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</code>：将任务放到队列中，异步执行，也就是说在<code>其他线程</code>中执行任务，<code>不阻塞当前线程</code>。</h3><h4 id=\"dispatch-async任务到其它串行队列中。\"><a href=\"#dispatch-async任务到其它串行队列中。\" class=\"headerlink\" title=\"dispatch_async任务到其它串行队列中。\"></a>dispatch_async任务到其它串行队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 05:06:15.123 MyPractice[27791:4366095] step0 finished! - &lt;NSThread: 0x7fe7196022e0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 05:06:16.129 MyPractice[27791:4366129] step1 finished! - &lt;NSThread: 0x7fe7196a2f50&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 05:06:17.125 MyPractice[27791:4366095] step2 finished! - &lt;NSThread: 0x7fe7196022e0&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>执行顺序为step0 -&gt; step1 -&gt; step2，step1在其它线程上执行，注意step2与step0时差2秒，step1与step0时差1秒，也就是说step1与step2并行。<br>程序运行到step0，step1插入用户自定义串行队列，在其它线程执行，不阻塞当前线程（主线程），并立即返回，于是step2开始执行。</p>\n<h4 id=\"dispatch-async任务到当前串行队列中。\"><a href=\"#dispatch-async任务到当前串行队列中。\" class=\"headerlink\" title=\"dispatch_async任务到当前串行队列中。\"></a>dispatch_async任务到当前串行队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_get_main_queue();</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 05:10:43.516 MyPractice[27830:4369848] step0 finished! - &lt;NSThread: 0x7fc280d07d30&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 05:10:45.518 MyPractice[27830:4369848] step2 finished! - &lt;NSThread: 0x7fc280d07d30&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 05:10:46.524 MyPractice[27830:4369848] step1 finished! - &lt;NSThread: 0x7fc280d07d30&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>执行顺序为step0 -&gt; step2 -&gt; step1，step1在主线程上执行（这与我们猜想的新开线程不一致，说明我们的猜想错了，至于为什么，先放一放，后面再说），从执行时间来看任务是串行执行的。<br>执行完step0，step1插入主队列，不阻塞当前线程（主线程）并立即返回，开始执行step2，但是block1却必须等待block0执行完毕，因此step1在step2结束后开始执行。</p>\n<h4 id=\"dispatch-async任务到其他并发队列中。\"><a href=\"#dispatch-async任务到其他并发队列中。\" class=\"headerlink\" title=\"dispatch_async任务到其他并发队列中。\"></a>dispatch_async任务到其他并发队列中。</h4><p>已经在5. xxx中实验过，3个任务在3个不同的线程上异步执行。</p>\n<p><strong>总结</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*!</div><div class=\"line\"> * @function dispatch_async</div><div class=\"line\"> *</div><div class=\"line\"> * @abstract</div><div class=\"line\"> * Submits a block for asynchronous execution on a dispatch queue.</div><div class=\"line\"> *</div><div class=\"line\"> * @discussion</div><div class=\"line\"> * The dispatch_async() function is the fundamental mechanism for submitting</div><div class=\"line\"> * blocks to a dispatch queue.</div><div class=\"line\"> *</div><div class=\"line\"> * Calls to dispatch_async() always return immediately after the block has</div><div class=\"line\"> * been submitted, and never wait for the block to be invoked.</div><div class=\"line\"> *</div><div class=\"line\"> * The target queue determines whether the block will be invoked serially or</div><div class=\"line\"> * concurrently with respect to other blocks submitted to that same queue.</div><div class=\"line\"> * Serial queues are processed concurrently with respect to each other.</div><div class=\"line\"> *</div><div class=\"line\"> * @param queue</div><div class=\"line\"> * The target dispatch queue to which the block is submitted.</div><div class=\"line\"> * The system will hold a reference on the target queue until the block</div><div class=\"line\"> * has finished.</div><div class=\"line\"> * The result of passing NULL in this parameter is undefined.</div><div class=\"line\"> *</div><div class=\"line\"> * @param block</div><div class=\"line\"> * The block to submit to the target dispatch queue. This function performs</div><div class=\"line\"> * Block_copy() and Block_release() on behalf of callers.</div><div class=\"line\"> * The result of passing NULL in this parameter is undefined.</div><div class=\"line\"> */</div><div class=\"line\">#ifdef __BLOCKS__</div><div class=\"line\">__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)</div><div class=\"line\">DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW</div><div class=\"line\">void</div><div class=\"line\">dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</div><div class=\"line\">#endif</div></pre></td></tr></table></figure></p>\n<ul>\n<li>dispatch_async()的机制是把blocks任务提交到队列中。</li>\n<li>dispatch_async()会立即返回而不会等待block完成。</li>\n<li>目标队列的类型决定任务是按照队列里任务的顺序串行或并发地执行；串行队列之间是并发的。<br><strong>这里我的理解是，如果dispatch_async任务到一个并发队列中，那么任务就会被委派到一个新线程中执行，而如果放入一个串行队列，那么它有可能在当前线程执行，也有可能在其他线程执行。在上文实验中出现特例的是主队列，同时它也是当前队列，而主队列又是特殊的串行队列，它只在主线程上执行。这里的主队列比较特殊，不能根据它做出准确结论，我们需要再做一些实验</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1.1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1.1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">    </div><div class=\"line\">    dispatch_async(queue, ^&#123;     // block1.2</div><div class=\"line\">        [NSThread sleepForTimeInterval:1];</div><div class=\"line\">        NSLog(@&quot;step1.2 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1.3</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1.3 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:3];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 11:03:07.821 MyPractice[28927:4454751] step0 finished! - &lt;NSThread: 0x7fbe786079a0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:03:08.827 MyPractice[28927:4454778] step1.1 finished! - &lt;NSThread: 0x7fbe78419320&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 11:03:09.831 MyPractice[28927:4454778] step1.3 finished! - &lt;NSThread: 0x7fbe78419320&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 11:03:10.823 MyPractice[28927:4454751] step2 finished! - &lt;NSThread: 0x7fbe786079a0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:03:10.832 MyPractice[28927:4454778] step1.2 finished! - &lt;NSThread: 0x7fbe78419320&gt;&#123;number = 2, name = (null)&#125;</div></pre></td></tr></table></figure>\n<p>block1.1不在当前线程（主线程）中执行，而是在新线程（0x7fbe78419320）中，从当前线程切换到了新线程；<br>block1.2仍然在当前线程（0x7fbe78419320）中执行；<br>另外，block1.3也在（0x7fbe78419320）这一线程中执行，同样没有进入一个新线程；</p>\n<p>结合实验的结果和一些blog的说法，我认为block在哪个线程取决于queue，对于每个queue来说，它和线程池有某种对应关系：</p>\n<ul>\n<li>主队列对应着主线程；</li>\n<li>并发队列对应多条线程（非主线程）；</li>\n<li>串行队列对应着一条线程（非主线程）；</li>\n<li>dispatch_sync&amp;dispatch_async：调度对应线程池中的线程；</li>\n</ul>\n<p>接下来继续解读官方API</p>\n<ul>\n<li>系统会保留目标队列的引用直到block结束。（queue中有任务时不会释放）</li>\n<li>参数queue － block任务提交的目标队列；如果传递进来的queue为NULL，返回结果为undefined。</li>\n<li>dispatch_async()会代替它的调用者执行Block_copy()和Block_realease()。（block进入queue时会copy，出queue时会realease）</li>\n<li>参数block － 将要在目标队列中执行的任务；如果传递进来的block为NULL，返回结果为undedined。</li>\n</ul>\n<p>最后对自己提个问题，既然UI的实现没有多线程支持，那么将UI操作放入一个自定义的队列时，它在哪个线程执行呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">__weak ViewController* weakSelf = self;</div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1</div><div class=\"line\">    NSLog(@&quot;before step1! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    weakSelf.view.backgroundColor = [UIColor blueColor];</div><div class=\"line\">    NSLog(@&quot;after step1! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 11:21:46.485 MyPractice[29211:4475426] step0 finished! - &lt;NSThread: 0x7fd5e1403450&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:21:46.486 MyPractice[29211:4475474] before step1! - &lt;NSThread: 0x7fd5e1523bb0&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 11:21:47.489 MyPractice[29211:4475474] after step1! - &lt;NSThread: 0x7fd5e1523bb0&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 11:21:48.486 MyPractice[29211:4475426] step2 finished! - &lt;NSThread: 0x7fd5e1403450&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">__weak ViewController* weakSelf = self;</div><div class=\"line\">dispatch_sync(queue, ^&#123;     // block1</div><div class=\"line\">    NSLog(@&quot;before step1! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    weakSelf.view.backgroundColor = [UIColor blueColor];</div><div class=\"line\">    NSLog(@&quot;after step1! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 11:22:20.948 MyPractice[29246:4476879] step0 finished! - &lt;NSThread: 0x7f8962402ee0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:22:20.949 MyPractice[29246:4476879] before step1! - &lt;NSThread: 0x7f8962402ee0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:22:21.950 MyPractice[29246:4476879] after step1! - &lt;NSThread: 0x7f8962402ee0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:22:23.952 MyPractice[29246:4476879] step2 finished! - &lt;NSThread: 0x7f8962402ee0&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>可以看到仍然和之前总结的一样，在哪个线程执行仍然取决于queue的类型。<br>此处迷茫++，还得继续研究啊…</p>\n","excerpt":"<p>GCD是老生常谈了，不过作为一个新手这个基础乃是重中之重，光看他人的blog总是难以消化，因此自己做些笔记总结实验一下，如有偏差还望指正。<br>","more":"</p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ol>\n<li>代码是顺序执行的。</li>\n<li>queue是FIFO（先进先出）的数据结构。</li>\n<li>线程之间是并行的。</li>\n<li><code>串行队列</code>：任务<code>不能同时进行</code>，这意味着第n+1个任务必须等待0…n个任务全部完成后才会开始。</li>\n<li><code>并发队列</code>：任务<code>可以同时进行</code>，这意味着只要0…n个任务开始执行，那么第n+1个任务也可以开始。</li>\n<li><code>void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);</code>：将任务（也就是block）放到队列中，同步执行，也就是说在<code>当前线程</code>中执行任务，<code>阻塞当前线程</code>。</li>\n<li><code>void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</code>：将任务放到队列中，异步执行，也就是说在<code>其他线程</code>中执行任务，<code>不阻塞当前线程</code>。（在下文的推演中，发现其并不总是在<code>其他线程</code>中执行）<br>（p.s. 在实际推演和API中，发现6、7两条中对于线程的描述均是错误的，block在哪个线程中运行取决于queue）</li>\n</ol>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><h3 id=\"1-代码是顺序执行的。\"><a href=\"#1-代码是顺序执行的。\" class=\"headerlink\" title=\"1. 代码是顺序执行的。\"></a>1. 代码是顺序执行的。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSLog(@&quot;step0&quot;);</div><div class=\"line\">NSLog(@&quot;step1&quot;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-12 22:29:49.002 MyPractice[25215:3752290] step0</div><div class=\"line\">2016-08-12 22:29:49.002 MyPractice[25215:3752290] step1</div></pre></td></tr></table></figure>\n<p>可以看到确实是顺序执行的（严肃脸）。</p>\n<h3 id=\"2-queue是FIFO（先进先出）的数据结构。\"><a href=\"#2-queue是FIFO（先进先出）的数据结构。\" class=\"headerlink\" title=\"2. queue是FIFO（先进先出）的数据结构。\"></a>2. queue是FIFO（先进先出）的数据结构。</h3><h3 id=\"3-线程之间是并行的。\"><a href=\"#3-线程之间是并行的。\" class=\"headerlink\" title=\"3. 线程之间是并行的。\"></a>3. 线程之间是并行的。</h3><h3 id=\"4-串行队列：任务不能同时进行，这意味着第n-1个任务必须等待0…n个任务全部完成后才会开始。\"><a href=\"#4-串行队列：任务不能同时进行，这意味着第n-1个任务必须等待0…n个任务全部完成后才会开始。\" class=\"headerlink\" title=\"4. 串行队列：任务不能同时进行，这意味着第n+1个任务必须等待0…n个任务全部完成后才会开始。\"></a>4. <code>串行队列</code>：任务<code>不能同时进行</code>，这意味着第n+1个任务必须等待0…n个任务全部完成后才会开始。</h3><p>首先来看什么是<code>DISPATCH_QUEUE_SERIAL</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*!</div><div class=\"line\"> * @const DISPATCH_QUEUE_SERIAL</div><div class=\"line\"> * @discussion A dispatch queue that invokes blocks serially in FIFO order.</div><div class=\"line\"> */</div><div class=\"line\">#define DISPATCH_QUEUE_SERIAL NULL</div></pre></td></tr></table></figure></p>\n<p>该队列以先进先出的顺序串行调用blocks。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">for (int i = 0; i &lt; 3; i++) &#123;</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        [NSThread sleepForTimeInterval:1];</div><div class=\"line\">        NSLog(@&quot;step1.%d finished! - %@&quot;, i, [NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 22:49:03.733 MyPractice[32046:5376787] step0 finished! - &lt;NSThread: 0x7fac03602dd0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 22:49:03.734 MyPractice[32046:5376787] step2 finished! - &lt;NSThread: 0x7fac03602dd0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 22:49:04.737 MyPractice[32046:5376906] step1.0 finished! - &lt;NSThread: 0x7fac034a0690&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 22:49:05.741 MyPractice[32046:5376906] step1.1 finished! - &lt;NSThread: 0x7fac034a0690&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 22:49:06.747 MyPractice[32046:5376906] step1.2 finished! - &lt;NSThread: 0x7fac034a0690&gt;&#123;number = 2, name = (null)&#125;</div></pre></td></tr></table></figure>\n<p>可以看到1大类中的三个任务顺序执行。</p>\n<h3 id=\"5-并发队列：任务可以同时进行，这意味着只要0…n个任务开始执行，那么第n-1个任务也可以开始。\"><a href=\"#5-并发队列：任务可以同时进行，这意味着只要0…n个任务开始执行，那么第n-1个任务也可以开始。\" class=\"headerlink\" title=\"5. 并发队列：任务可以同时进行，这意味着只要0…n个任务开始执行，那么第n+1个任务也可以开始。\"></a>5. <code>并发队列</code>：任务<code>可以同时进行</code>，这意味着只要0…n个任务开始执行，那么第n+1个任务也可以开始。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">for (int i = 0; i &lt; 3; i++) &#123;</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        [NSThread sleepForTimeInterval:1];</div><div class=\"line\">        NSLog(@&quot;step1.%d finished! - %@&quot;, i, [NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 04:21:14.000 MyPractice[27321:4331458] step0 finished! - &lt;NSThread: 0x7f9c08c059f0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:21:14.001 MyPractice[27321:4331458] step2 finished! - &lt;NSThread: 0x7f9c08c059f0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:21:15.005 MyPractice[27321:4331587] step1.1 finished! - &lt;NSThread: 0x7f9c08f04540&gt;&#123;number = 3, name = (null)&#125;</div><div class=\"line\">2016-08-13 04:21:15.005 MyPractice[27321:4331577] step1.0 finished! - &lt;NSThread: 0x7f9c08d0acc0&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 04:21:15.005 MyPractice[27321:4331593] step1.2 finished! - &lt;NSThread: 0x7f9c08e0b560&gt;&#123;number = 4, name = (null)&#125;</div></pre></td></tr></table></figure>\n<p>可以看到1大类中的三个任务同时执行。</p>\n<h3 id=\"6-void-dispatch-sync-dispatch-queue-t-queue-dispatch-block-t-block-：将任务（也就是block）放到队列中，同步执行，也就是说在当前线程中执行任务，阻塞当前线程。\"><a href=\"#6-void-dispatch-sync-dispatch-queue-t-queue-dispatch-block-t-block-：将任务（也就是block）放到队列中，同步执行，也就是说在当前线程中执行任务，阻塞当前线程。\" class=\"headerlink\" title=\"6. void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);：将任务（也就是block）放到队列中，同步执行，也就是说在当前线程中执行任务，阻塞当前线程。\"></a>6. <code>void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);</code>：将任务（也就是block）放到队列中，同步执行，也就是说在<code>当前线程</code>中执行任务，<code>阻塞当前线程</code>。</h3><h4 id=\"dispatch-sync任务到其它串行队列中。\"><a href=\"#dispatch-sync任务到其它串行队列中。\" class=\"headerlink\" title=\"dispatch_sync任务到其它串行队列中。\"></a>dispatch_sync任务到其它串行队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_sync(queue, ^&#123;    // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 04:28:39.621 MyPractice[27486:4339739] step0 finished! - &lt;NSThread: 0x7f8050606ad0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:28:40.622 MyPractice[27486:4339739] step1 finished! - &lt;NSThread: 0x7f8050606ad0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:28:42.623 MyPractice[27486:4339739] step2 finished! - &lt;NSThread: 0x7f8050606ad0&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>block1处于用于用户自定义串行队列中，由当前线程（主线程）执行，阻塞主线程，step2必须等待block1返回后方可开始执行。</p>\n<h4 id=\"dispatch-sync任务到当前串行队列中。\"><a href=\"#dispatch-sync任务到当前串行队列中。\" class=\"headerlink\" title=\"dispatch_sync任务到当前串行队列中。\"></a>dispatch_sync任务到当前串行队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_get_main_queue();</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_sync(queue, ^&#123;     // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 04:35:51.992 MyPractice[27577:4345752] step0 finished! - &lt;NSThread: 0x7f80d8701fc0&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>整体为主队列中的block0，执行完step0后等待block1返回，然后才可执行step2；同时block1插入主队列，阻塞主线程，此时主队列中还有未完成的任务block0，因此block1开始等待block1完成。<br>至此，block0与block1循环等待，死锁。</p>\n<h4 id=\"dispatch-sync任务到其它并发队列中。\"><a href=\"#dispatch-sync任务到其它并发队列中。\" class=\"headerlink\" title=\"dispatch_sync任务到其它并发队列中。\"></a>dispatch_sync任务到其它并发队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_sync(queue, ^&#123;     // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 04:41:45.625 MyPractice[27630:4348773] step0 finished! - &lt;NSThread: 0x7faec9403070&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:41:46.625 MyPractice[27630:4348773] step1 finished! - &lt;NSThread: 0x7faec9403070&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 04:41:48.627 MyPractice[27630:4348773] step2 finished! - &lt;NSThread: 0x7faec9403070&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>step0执行完毕，block1插入用户自定义并发队列，仍在当前线程（主线程）执行，因此阻塞主线程，此时的并发队列前没有其它任务，block1正常执行完毕返回，开始执行step2。</p>\n<p><strong>总结</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*!</div><div class=\"line\"> * @function dispatch_sync</div><div class=\"line\"> *</div><div class=\"line\"> * @abstract</div><div class=\"line\"> * Submits a block for synchronous execution on a dispatch queue.</div><div class=\"line\"> *</div><div class=\"line\"> * @discussion</div><div class=\"line\"> * Submits a block to a dispatch queue like dispatch_async(), however</div><div class=\"line\"> * dispatch_sync() will not return until the block has finished.</div><div class=\"line\"> *</div><div class=\"line\"> * Calls to dispatch_sync() targeting the current queue will result</div><div class=\"line\"> * in dead-lock. Use of dispatch_sync() is also subject to the same</div><div class=\"line\"> * multi-party dead-lock problems that may result from the use of a mutex.</div><div class=\"line\"> * Use of dispatch_async() is preferred.</div><div class=\"line\"> *</div><div class=\"line\"> * Unlike dispatch_async(), no retain is performed on the target queue. Because</div><div class=\"line\"> * calls to this function are synchronous, the dispatch_sync() &quot;borrows&quot; the</div><div class=\"line\"> * reference of the caller.</div><div class=\"line\"> *</div><div class=\"line\"> * As an optimization, dispatch_sync() invokes the block on the current</div><div class=\"line\"> * thread when possible.</div><div class=\"line\"> *</div><div class=\"line\"> * @param queue</div><div class=\"line\"> * The target dispatch queue to which the block is submitted.</div><div class=\"line\"> * The result of passing NULL in this parameter is undefined.</div><div class=\"line\"> *</div><div class=\"line\"> * @param block</div><div class=\"line\"> * The block to be invoked on the target dispatch queue.</div><div class=\"line\"> * The result of passing NULL in this parameter is undefined.</div><div class=\"line\"> */</div><div class=\"line\">#ifdef __BLOCKS__</div><div class=\"line\">__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)</div><div class=\"line\">DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW</div><div class=\"line\">void</div><div class=\"line\">dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);</div><div class=\"line\">#endif</div></pre></td></tr></table></figure></p>\n<ul>\n<li>dispatch_sync()在block结束前不会返回。</li>\n<li>dispatch_sync()任务到当前队列中会引起死锁。</li>\n<li>系统不会retain目标队列，因为dispatch_sync()是同步执行的，它“借”走了其调度者的引用。（这里我理解为，同步执行的任务不完成不会返回，因此引用从外部跟着它进入了block内部，在任务完成后再回到外部）。</li>\n<li>dispatch_sync()可能会无视queue的类型，优先在当前线程执行任务。（不知在什么情况下不会在当前线程执行，此处留个心眼）。</li>\n<li>参数queue － block任务提交的目标队列；如果传递进来的queue为NULL，返回结果为undefined。</li>\n<li>参数block － 将要在目标队列中执行的任务；如果传递进来的block为NULL，返回结果为undedined。</li>\n</ul>\n<h3 id=\"7-void-dispatch-async-dispatch-queue-t-queue-dispatch-block-t-block-：将任务放到队列中，异步执行，也就是说在其他线程中执行任务，不阻塞当前线程。\"><a href=\"#7-void-dispatch-async-dispatch-queue-t-queue-dispatch-block-t-block-：将任务放到队列中，异步执行，也就是说在其他线程中执行任务，不阻塞当前线程。\" class=\"headerlink\" title=\"7. void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);：将任务放到队列中，异步执行，也就是说在其他线程中执行任务，不阻塞当前线程。\"></a>7. <code>void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</code>：将任务放到队列中，异步执行，也就是说在<code>其他线程</code>中执行任务，<code>不阻塞当前线程</code>。</h3><h4 id=\"dispatch-async任务到其它串行队列中。\"><a href=\"#dispatch-async任务到其它串行队列中。\" class=\"headerlink\" title=\"dispatch_async任务到其它串行队列中。\"></a>dispatch_async任务到其它串行队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 05:06:15.123 MyPractice[27791:4366095] step0 finished! - &lt;NSThread: 0x7fe7196022e0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 05:06:16.129 MyPractice[27791:4366129] step1 finished! - &lt;NSThread: 0x7fe7196a2f50&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 05:06:17.125 MyPractice[27791:4366095] step2 finished! - &lt;NSThread: 0x7fe7196022e0&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>执行顺序为step0 -&gt; step1 -&gt; step2，step1在其它线程上执行，注意step2与step0时差2秒，step1与step0时差1秒，也就是说step1与step2并行。<br>程序运行到step0，step1插入用户自定义串行队列，在其它线程执行，不阻塞当前线程（主线程），并立即返回，于是step2开始执行。</p>\n<h4 id=\"dispatch-async任务到当前串行队列中。\"><a href=\"#dispatch-async任务到当前串行队列中。\" class=\"headerlink\" title=\"dispatch_async任务到当前串行队列中。\"></a>dispatch_async任务到当前串行队列中。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_get_main_queue();</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 05:10:43.516 MyPractice[27830:4369848] step0 finished! - &lt;NSThread: 0x7fc280d07d30&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 05:10:45.518 MyPractice[27830:4369848] step2 finished! - &lt;NSThread: 0x7fc280d07d30&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 05:10:46.524 MyPractice[27830:4369848] step1 finished! - &lt;NSThread: 0x7fc280d07d30&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>执行顺序为step0 -&gt; step2 -&gt; step1，step1在主线程上执行（这与我们猜想的新开线程不一致，说明我们的猜想错了，至于为什么，先放一放，后面再说），从执行时间来看任务是串行执行的。<br>执行完step0，step1插入主队列，不阻塞当前线程（主线程）并立即返回，开始执行step2，但是block1却必须等待block0执行完毕，因此step1在step2结束后开始执行。</p>\n<h4 id=\"dispatch-async任务到其他并发队列中。\"><a href=\"#dispatch-async任务到其他并发队列中。\" class=\"headerlink\" title=\"dispatch_async任务到其他并发队列中。\"></a>dispatch_async任务到其他并发队列中。</h4><p>已经在5. xxx中实验过，3个任务在3个不同的线程上异步执行。</p>\n<p><strong>总结</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*!</div><div class=\"line\"> * @function dispatch_async</div><div class=\"line\"> *</div><div class=\"line\"> * @abstract</div><div class=\"line\"> * Submits a block for asynchronous execution on a dispatch queue.</div><div class=\"line\"> *</div><div class=\"line\"> * @discussion</div><div class=\"line\"> * The dispatch_async() function is the fundamental mechanism for submitting</div><div class=\"line\"> * blocks to a dispatch queue.</div><div class=\"line\"> *</div><div class=\"line\"> * Calls to dispatch_async() always return immediately after the block has</div><div class=\"line\"> * been submitted, and never wait for the block to be invoked.</div><div class=\"line\"> *</div><div class=\"line\"> * The target queue determines whether the block will be invoked serially or</div><div class=\"line\"> * concurrently with respect to other blocks submitted to that same queue.</div><div class=\"line\"> * Serial queues are processed concurrently with respect to each other.</div><div class=\"line\"> *</div><div class=\"line\"> * @param queue</div><div class=\"line\"> * The target dispatch queue to which the block is submitted.</div><div class=\"line\"> * The system will hold a reference on the target queue until the block</div><div class=\"line\"> * has finished.</div><div class=\"line\"> * The result of passing NULL in this parameter is undefined.</div><div class=\"line\"> *</div><div class=\"line\"> * @param block</div><div class=\"line\"> * The block to submit to the target dispatch queue. This function performs</div><div class=\"line\"> * Block_copy() and Block_release() on behalf of callers.</div><div class=\"line\"> * The result of passing NULL in this parameter is undefined.</div><div class=\"line\"> */</div><div class=\"line\">#ifdef __BLOCKS__</div><div class=\"line\">__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)</div><div class=\"line\">DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW</div><div class=\"line\">void</div><div class=\"line\">dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</div><div class=\"line\">#endif</div></pre></td></tr></table></figure></p>\n<ul>\n<li>dispatch_async()的机制是把blocks任务提交到队列中。</li>\n<li>dispatch_async()会立即返回而不会等待block完成。</li>\n<li>目标队列的类型决定任务是按照队列里任务的顺序串行或并发地执行；串行队列之间是并发的。<br><strong>这里我的理解是，如果dispatch_async任务到一个并发队列中，那么任务就会被委派到一个新线程中执行，而如果放入一个串行队列，那么它有可能在当前线程执行，也有可能在其他线程执行。在上文实验中出现特例的是主队列，同时它也是当前队列，而主队列又是特殊的串行队列，它只在主线程上执行。这里的主队列比较特殊，不能根据它做出准确结论，我们需要再做一些实验</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1.1</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1.1 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">    </div><div class=\"line\">    dispatch_async(queue, ^&#123;     // block1.2</div><div class=\"line\">        [NSThread sleepForTimeInterval:1];</div><div class=\"line\">        NSLog(@&quot;step1.2 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1.3</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    NSLog(@&quot;step1.3 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:3];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 11:03:07.821 MyPractice[28927:4454751] step0 finished! - &lt;NSThread: 0x7fbe786079a0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:03:08.827 MyPractice[28927:4454778] step1.1 finished! - &lt;NSThread: 0x7fbe78419320&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 11:03:09.831 MyPractice[28927:4454778] step1.3 finished! - &lt;NSThread: 0x7fbe78419320&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 11:03:10.823 MyPractice[28927:4454751] step2 finished! - &lt;NSThread: 0x7fbe786079a0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:03:10.832 MyPractice[28927:4454778] step1.2 finished! - &lt;NSThread: 0x7fbe78419320&gt;&#123;number = 2, name = (null)&#125;</div></pre></td></tr></table></figure>\n<p>block1.1不在当前线程（主线程）中执行，而是在新线程（0x7fbe78419320）中，从当前线程切换到了新线程；<br>block1.2仍然在当前线程（0x7fbe78419320）中执行；<br>另外，block1.3也在（0x7fbe78419320）这一线程中执行，同样没有进入一个新线程；</p>\n<p>结合实验的结果和一些blog的说法，我认为block在哪个线程取决于queue，对于每个queue来说，它和线程池有某种对应关系：</p>\n<ul>\n<li>主队列对应着主线程；</li>\n<li>并发队列对应多条线程（非主线程）；</li>\n<li>串行队列对应着一条线程（非主线程）；</li>\n<li>dispatch_sync&amp;dispatch_async：调度对应线程池中的线程；</li>\n</ul>\n<p>接下来继续解读官方API</p>\n<ul>\n<li>系统会保留目标队列的引用直到block结束。（queue中有任务时不会释放）</li>\n<li>参数queue － block任务提交的目标队列；如果传递进来的queue为NULL，返回结果为undefined。</li>\n<li>dispatch_async()会代替它的调用者执行Block_copy()和Block_realease()。（block进入queue时会copy，出queue时会realease）</li>\n<li>参数block － 将要在目标队列中执行的任务；如果传递进来的block为NULL，返回结果为undedined。</li>\n</ul>\n<p>最后对自己提个问题，既然UI的实现没有多线程支持，那么将UI操作放入一个自定义的队列时，它在哪个线程执行呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">__weak ViewController* weakSelf = self;</div><div class=\"line\">dispatch_async(queue, ^&#123;     // block1</div><div class=\"line\">    NSLog(@&quot;before step1! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    weakSelf.view.backgroundColor = [UIColor blueColor];</div><div class=\"line\">    NSLog(@&quot;after step1! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 11:21:46.485 MyPractice[29211:4475426] step0 finished! - &lt;NSThread: 0x7fd5e1403450&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:21:46.486 MyPractice[29211:4475474] before step1! - &lt;NSThread: 0x7fd5e1523bb0&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 11:21:47.489 MyPractice[29211:4475474] after step1! - &lt;NSThread: 0x7fd5e1523bb0&gt;&#123;number = 2, name = (null)&#125;</div><div class=\"line\">2016-08-13 11:21:48.486 MyPractice[29211:4475426] step2 finished! - &lt;NSThread: 0x7fd5e1403450&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;cn.edu.bjtu.myQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;step0 finished! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">__weak ViewController* weakSelf = self;</div><div class=\"line\">dispatch_sync(queue, ^&#123;     // block1</div><div class=\"line\">    NSLog(@&quot;before step1! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">    [NSThread sleepForTimeInterval:1];</div><div class=\"line\">    weakSelf.view.backgroundColor = [UIColor blueColor];</div><div class=\"line\">    NSLog(@&quot;after step1! - %@&quot;, [NSThread currentThread]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">[NSThread sleepForTimeInterval:2];</div><div class=\"line\">NSLog(@&quot;step2 finished! - %@&quot;, [NSThread currentThread]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-08-13 11:22:20.948 MyPractice[29246:4476879] step0 finished! - &lt;NSThread: 0x7f8962402ee0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:22:20.949 MyPractice[29246:4476879] before step1! - &lt;NSThread: 0x7f8962402ee0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:22:21.950 MyPractice[29246:4476879] after step1! - &lt;NSThread: 0x7f8962402ee0&gt;&#123;number = 1, name = main&#125;</div><div class=\"line\">2016-08-13 11:22:23.952 MyPractice[29246:4476879] step2 finished! - &lt;NSThread: 0x7f8962402ee0&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>\n<p>可以看到仍然和之前总结的一样，在哪个线程执行仍然取决于queue的类型。<br>此处迷茫++，还得继续研究啊…</p>"},{"title":"开始","date":"2016-08-10T06:13:07.000Z","_content":"回想大学四年荒废了太多时间，看似忙碌，总是在一些虚名浮利间浪费光阴，悔之不及。\n不过努力是从什么时候开始都不晚的，就从现在开始吧。","source":"_posts/开始.md","raw":"---\ntitle: 开始\ndate: 2016-08-10 14:13:07\ncategories: 随笔\ntags:\n---\n回想大学四年荒废了太多时间，看似忙碌，总是在一些虚名浮利间浪费光阴，悔之不及。\n不过努力是从什么时候开始都不晚的，就从现在开始吧。","slug":"开始","published":1,"updated":"2016-08-15T09:41:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisig8xny0007zpk5r82hukpx","content":"<p>回想大学四年荒废了太多时间，看似忙碌，总是在一些虚名浮利间浪费光阴，悔之不及。<br>不过努力是从什么时候开始都不晚的，就从现在开始吧。</p>\n","excerpt":"","more":"<p>回想大学四年荒废了太多时间，看似忙碌，总是在一些虚名浮利间浪费光阴，悔之不及。<br>不过努力是从什么时候开始都不晚的，就从现在开始吧。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cisig8xnu0005zpk5qjkaotkt","category_id":"cisig8xnp0003zpk5f5m5k4xu","_id":"cisig8xo00009zpk5whilmf4e"},{"post_id":"cisig8xne0000zpk554qwdtek","category_id":"cisig8xnp0003zpk5f5m5k4xu","_id":"cisig8xo1000czpk5h6w76m5x"},{"post_id":"cisig8xnj0001zpk5r7t201nr","category_id":"cisig8xnp0003zpk5f5m5k4xu","_id":"cisig8xo3000dzpk5cpg216wn"},{"post_id":"cisig8xnq0004zpk5beqyb91a","category_id":"cisig8xnp0003zpk5f5m5k4xu","_id":"cisig8xo4000gzpk5h3i7tkje"},{"post_id":"cisig8xny0007zpk5r82hukpx","category_id":"cisig8xo3000ezpk5tnfu7vi8","_id":"cisig8xo5000izpk5fxom1nu8"}],"PostTag":[{"post_id":"cisig8xne0000zpk554qwdtek","tag_id":"cisig8xnm0002zpk51j8pedff","_id":"cisig8xo6000lzpk57hvwpo8o"},{"post_id":"cisig8xne0000zpk554qwdtek","tag_id":"cisig8xnx0006zpk5lcfddckm","_id":"cisig8xo7000mzpk5vkqkeu6y"},{"post_id":"cisig8xne0000zpk554qwdtek","tag_id":"cisig8xo1000bzpk54mdtk7ok","_id":"cisig8xo7000ozpk5dkopeb8z"},{"post_id":"cisig8xne0000zpk554qwdtek","tag_id":"cisig8xo3000fzpk5aeocenuz","_id":"cisig8xo7000pzpk590bj0eke"},{"post_id":"cisig8xne0000zpk554qwdtek","tag_id":"cisig8xo4000hzpk5wc5ar3i3","_id":"cisig8xo9000rzpk5jb8j1ar3"},{"post_id":"cisig8xne0000zpk554qwdtek","tag_id":"cisig8xo5000jzpk5cih8vnl4","_id":"cisig8xo9000szpk5is69rwgz"},{"post_id":"cisig8xnj0001zpk5r7t201nr","tag_id":"cisig8xnm0002zpk51j8pedff","_id":"cisig8xob000wzpk56g1i2jgz"},{"post_id":"cisig8xnj0001zpk5r7t201nr","tag_id":"cisig8xo1000bzpk54mdtk7ok","_id":"cisig8xob000xzpk5gky9o4ar"},{"post_id":"cisig8xnj0001zpk5r7t201nr","tag_id":"cisig8xo7000qzpk5jy8p7qn6","_id":"cisig8xoc000zzpk5foke20s6"},{"post_id":"cisig8xnj0001zpk5r7t201nr","tag_id":"cisig8xo4000hzpk5wc5ar3i3","_id":"cisig8xoc0010zpk5joeg7wm0"},{"post_id":"cisig8xnj0001zpk5r7t201nr","tag_id":"cisig8xoa000uzpk5tz2t5y5t","_id":"cisig8xoc0012zpk52htbdr85"},{"post_id":"cisig8xnu0005zpk5qjkaotkt","tag_id":"cisig8xoa000vzpk5gjzvhnnj","_id":"cisig8xod0013zpk5h15f2q2k"},{"post_id":"cisig8xnu0005zpk5qjkaotkt","tag_id":"cisig8xob000yzpk5x2h85yis","_id":"cisig8xoe0014zpk5fhli6v1l"},{"post_id":"cisig8xnu0005zpk5qjkaotkt","tag_id":"cisig8xoc0011zpk5mapsaj8e","_id":"cisig8xoe0015zpk5v7ntf05b"}],"Tag":[{"name":"Objective-C","_id":"cisig8xnm0002zpk51j8pedff"},{"name":"程序设计基础","_id":"cisig8xnx0006zpk5lcfddckm"},{"name":"类","_id":"cisig8xo1000bzpk54mdtk7ok"},{"name":"对象","_id":"cisig8xo3000fzpk5aeocenuz"},{"name":"方法","_id":"cisig8xo4000hzpk5wc5ar3i3"},{"name":"autoreleasepool","_id":"cisig8xo5000jzpk5cih8vnl4"},{"name":"属性","_id":"cisig8xo7000qzpk5jy8p7qn6"},{"name":"惰性实例化","_id":"cisig8xoa000uzpk5tz2t5y5t"},{"name":"iOS","_id":"cisig8xoa000vzpk5gjzvhnnj"},{"name":"多线程","_id":"cisig8xob000yzpk5x2h85yis"},{"name":"GCD","_id":"cisig8xoc0011zpk5mapsaj8e"}]}}